//******************************************************************************
// BAREFOOT NETWORKS CONFIDENTIAL & PROPRIETARY
//
// Copyright (c) 2017-2018 Barefoot Networks, Inc.
//
// All Rights Reserved.
//
// NOTICE: All information contained herein is, and remains the property of
// Barefoot Networks, Inc. and its suppliers, if any. The intellectual and
// technical concepts contained herein are proprietary to Barefoot Networks,
// Inc.
// and its suppliers and may be covered by U.S. and Foreign Patents, patents in
// process, and are protected by trade secret or copyright law.
// Dissemination of this information or reproduction of this material is
// strictly forbidden unless prior written permission is obtained from
// Barefoot Networks, Inc.
//
// No warranty, explicit or implicit is provided, unless granted under a
// written agreement with Barefoot Networks, Inc.
//
//
//****************************************************************************

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.6.1
// source: bfruntime/bfruntime.proto

package __

import (
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SetForwardingPipelineConfigResponseType int32

const (
	SetForwardingPipelineConfigResponseType_WARM_INIT_STARTED  SetForwardingPipelineConfigResponseType = 0 // WARM_INIT_STARTED indicates a successful
	SetForwardingPipelineConfigResponseType_WARM_INIT_FINISHED SetForwardingPipelineConfigResponseType = 1 // WARM_INIT_FINISHED indicates a successful
)

// Enum value maps for SetForwardingPipelineConfigResponseType.
var (
	SetForwardingPipelineConfigResponseType_name = map[int32]string{
		0: "WARM_INIT_STARTED",
		1: "WARM_INIT_FINISHED",
	}
	SetForwardingPipelineConfigResponseType_value = map[string]int32{
		"WARM_INIT_STARTED":  0,
		"WARM_INIT_FINISHED": 1,
	}
)

func (x SetForwardingPipelineConfigResponseType) Enum() *SetForwardingPipelineConfigResponseType {
	p := new(SetForwardingPipelineConfigResponseType)
	*p = x
	return p
}

func (x SetForwardingPipelineConfigResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetForwardingPipelineConfigResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_bfruntime_bfruntime_proto_enumTypes[0].Descriptor()
}

func (SetForwardingPipelineConfigResponseType) Type() protoreflect.EnumType {
	return &file_bfruntime_bfruntime_proto_enumTypes[0]
}

func (x SetForwardingPipelineConfigResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetForwardingPipelineConfigResponseType.Descriptor instead.
func (SetForwardingPipelineConfigResponseType) EnumDescriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{0}
}

type WriteRequest_Atomicity int32

const (
	// Required. This is the default behavior. The batch is processed in a
	// non-atomic manner from a dataplane point of view. Each operation within
	// the batch must be attempted even if one or more encounter errors.
	// Every dataplane packet is guaranteed to be processed according to
	// table contents as they are between two individual operations of the
	// batch, but there could be several packets processed that see each of
	// these intermediate stages.
	WriteRequest_CONTINUE_ON_ERROR WriteRequest_Atomicity = 0
	// Optional. Operations within the batch are committed to dataplane until
	// an error is encountered. At this point, the operations must be rolled
	// back such that both software and dataplane state is consistent with the
	// state before the batch was attempted. The resulting behavior is
	// all-or-none, except the batch is not atomic from a data plane point of
	// view. Every dataplane packet is guaranteed to be processed according to
	// table contents as they are between two individual operations of the
	// batch, but there could be several packets processed that see each of
	// these intermediate stages.
	WriteRequest_ROLLBACK_ON_ERROR WriteRequest_Atomicity = 1
	// Optional. Every dataplane packet is guaranteed to be processed according
	// to table contents before the batch began, or after the batch completed
	// and the operations were programmed to the hardware.
	// The batch is therefore treated as a transaction.
	WriteRequest_DATAPLANE_ATOMIC WriteRequest_Atomicity = 2
)

// Enum value maps for WriteRequest_Atomicity.
var (
	WriteRequest_Atomicity_name = map[int32]string{
		0: "CONTINUE_ON_ERROR",
		1: "ROLLBACK_ON_ERROR",
		2: "DATAPLANE_ATOMIC",
	}
	WriteRequest_Atomicity_value = map[string]int32{
		"CONTINUE_ON_ERROR": 0,
		"ROLLBACK_ON_ERROR": 1,
		"DATAPLANE_ATOMIC":  2,
	}
)

func (x WriteRequest_Atomicity) Enum() *WriteRequest_Atomicity {
	p := new(WriteRequest_Atomicity)
	*p = x
	return p
}

func (x WriteRequest_Atomicity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WriteRequest_Atomicity) Descriptor() protoreflect.EnumDescriptor {
	return file_bfruntime_bfruntime_proto_enumTypes[1].Descriptor()
}

func (WriteRequest_Atomicity) Type() protoreflect.EnumType {
	return &file_bfruntime_bfruntime_proto_enumTypes[1]
}

func (x WriteRequest_Atomicity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WriteRequest_Atomicity.Descriptor instead.
func (WriteRequest_Atomicity) EnumDescriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{0, 0}
}

type Update_Type int32

const (
	Update_UNSPECIFIED Update_Type = 0
	Update_INSERT      Update_Type = 1
	Update_MODIFY      Update_Type = 2
	// MODIFY_INC is used to add/delete the given data to/from the
	// existing table entry incrementally.
	Update_MODIFY_INC Update_Type = 3
	Update_DELETE     Update_Type = 4
)

// Enum value maps for Update_Type.
var (
	Update_Type_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "INSERT",
		2: "MODIFY",
		3: "MODIFY_INC",
		4: "DELETE",
	}
	Update_Type_value = map[string]int32{
		"UNSPECIFIED": 0,
		"INSERT":      1,
		"MODIFY":      2,
		"MODIFY_INC":  3,
		"DELETE":      4,
	}
)

func (x Update_Type) Enum() *Update_Type {
	p := new(Update_Type)
	*p = x
	return p
}

func (x Update_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Update_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_bfruntime_bfruntime_proto_enumTypes[2].Descriptor()
}

func (Update_Type) Type() protoreflect.EnumType {
	return &file_bfruntime_bfruntime_proto_enumTypes[2]
}

func (x Update_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Update_Type.Descriptor instead.
func (Update_Type) EnumDescriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{5, 0}
}

type TableModIncFlag_Type int32

const (
	// Enum to add the given data incrementally to the
	// exising table entry
	TableModIncFlag_MOD_INC_ADD TableModIncFlag_Type = 0
	// Enum to delete the given data from the
	// exising table entry
	TableModIncFlag_MOD_INC_DELETE TableModIncFlag_Type = 1
)

// Enum value maps for TableModIncFlag_Type.
var (
	TableModIncFlag_Type_name = map[int32]string{
		0: "MOD_INC_ADD",
		1: "MOD_INC_DELETE",
	}
	TableModIncFlag_Type_value = map[string]int32{
		"MOD_INC_ADD":    0,
		"MOD_INC_DELETE": 1,
	}
)

func (x TableModIncFlag_Type) Enum() *TableModIncFlag_Type {
	p := new(TableModIncFlag_Type)
	*p = x
	return p
}

func (x TableModIncFlag_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableModIncFlag_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_bfruntime_bfruntime_proto_enumTypes[3].Descriptor()
}

func (TableModIncFlag_Type) Type() protoreflect.EnumType {
	return &file_bfruntime_bfruntime_proto_enumTypes[3]
}

func (x TableModIncFlag_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TableModIncFlag_Type.Descriptor instead.
func (TableModIncFlag_Type) EnumDescriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{18, 0}
}

type IdleTable_IdleTableMode int32

const (
	IdleTable_IDLE_TABLE_POLL_MODE   IdleTable_IdleTableMode = 0
	IdleTable_IDLE_TABLE_NOTIFY_MODE IdleTable_IdleTableMode = 1
)

// Enum value maps for IdleTable_IdleTableMode.
var (
	IdleTable_IdleTableMode_name = map[int32]string{
		0: "IDLE_TABLE_POLL_MODE",
		1: "IDLE_TABLE_NOTIFY_MODE",
	}
	IdleTable_IdleTableMode_value = map[string]int32{
		"IDLE_TABLE_POLL_MODE":   0,
		"IDLE_TABLE_NOTIFY_MODE": 1,
	}
)

func (x IdleTable_IdleTableMode) Enum() *IdleTable_IdleTableMode {
	p := new(IdleTable_IdleTableMode)
	*p = x
	return p
}

func (x IdleTable_IdleTableMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdleTable_IdleTableMode) Descriptor() protoreflect.EnumDescriptor {
	return file_bfruntime_bfruntime_proto_enumTypes[4].Descriptor()
}

func (IdleTable_IdleTableMode) Type() protoreflect.EnumType {
	return &file_bfruntime_bfruntime_proto_enumTypes[4]
}

func (x IdleTable_IdleTableMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdleTable_IdleTableMode.Descriptor instead.
func (IdleTable_IdleTableMode) EnumDescriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{23, 0}
}

type Mode_PredefinedMode int32

const (
	Mode_ALL    Mode_PredefinedMode = 0
	Mode_SINGLE Mode_PredefinedMode = 1
)

// Enum value maps for Mode_PredefinedMode.
var (
	Mode_PredefinedMode_name = map[int32]string{
		0: "ALL",
		1: "SINGLE",
	}
	Mode_PredefinedMode_value = map[string]int32{
		"ALL":    0,
		"SINGLE": 1,
	}
)

func (x Mode_PredefinedMode) Enum() *Mode_PredefinedMode {
	p := new(Mode_PredefinedMode)
	*p = x
	return p
}

func (x Mode_PredefinedMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mode_PredefinedMode) Descriptor() protoreflect.EnumDescriptor {
	return file_bfruntime_bfruntime_proto_enumTypes[5].Descriptor()
}

func (Mode_PredefinedMode) Type() protoreflect.EnumType {
	return &file_bfruntime_bfruntime_proto_enumTypes[5]
}

func (x Mode_PredefinedMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mode_PredefinedMode.Descriptor instead.
func (Mode_PredefinedMode) EnumDescriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{26, 0}
}

type SetForwardingPipelineConfigRequest_Action int32

const (
	SetForwardingPipelineConfigRequest_BIND SetForwardingPipelineConfigRequest_Action = 0 // BIND: Default Action. Only binds the client to the program
	// specified in the p4_name. One client can bind to only one
	// program. One program can have only one client as of now. Even
	// in case of multiple programs on a single device, BIND requires
	// just one program’s config msg. If multiple repeated
	// forwarding_pipeline_config msgs are sent as part of this
	// request, then google.rpc.INVALID_ARGUMENT is sent. If a client
	// doesn't BIND, then it can only access
	// SetForwardingPipelineConfigRequest,
	// GetForwardingPipelineConfigRequest and StreamMessageRequest
	// RPCs. Read and Write RPCs are not allowed for non-bound clients
	SetForwardingPipelineConfigRequest_VERIFY SetForwardingPipelineConfigRequest_Action = 1 // VERIFY(Master): Verifies whether this config is valid or not.
	// Upon failure or incomplete config in the msg,
	// google.rpc.Code::INVALID_ARGUMENT is sent.
	SetForwardingPipelineConfigRequest_VERIFY_AND_WARM_INIT_BEGIN SetForwardingPipelineConfigRequest_Action = 2 // VERIFY_AND_WARM_INIT_BEGIN(Master):  Verifies the config and then
	// begins warm_init with this config. This does not modify the
	// forwarding state of the device. However, any subsequent Read /
	// Write requests must refer to fields in the new config. Returns an
	// INVALID_ARGUMENT error if the forwarding config is not provided or
	// if the provided config cannot be realized.
	SetForwardingPipelineConfigRequest_VERIFY_AND_WARM_INIT_BEGIN_AND_END SetForwardingPipelineConfigRequest_Action = 3 // VERIFY_AND_WARM_INIT_BEGIN_AND_END(Master): Verifies, starts
	// warm_init and then initiates warm_init_end on the switch. The
	// existing forwarding state is reset. Returns an INVALID_ARGUMENT
	// error if the forwarding config is not provided of if the provided
	// config cannot be realized.
	SetForwardingPipelineConfigRequest_WARM_INIT_END SetForwardingPipelineConfigRequest_Action = 4 // WARM_INIT_END(Master): Issues a warm_init_end. If
	// forwarding_pipeline_config contains anything, or if no
	// WARM_INIT_BEGIN was previously called on the device
	// with a valid config, then
	// google.rpc.Code::INVALID_ARGUMENT is sent. The
	// forwarding state in the target is updated by replaying
	// the write requests to the target device since the last
	// config was saved by the client.
	SetForwardingPipelineConfigRequest_RECONCILE_AND_WARM_INIT_END SetForwardingPipelineConfigRequest_Action = 5 // RECONCILE_AND_WARM_INIT_END(Master): Try and reconcile with the
)

// Enum value maps for SetForwardingPipelineConfigRequest_Action.
var (
	SetForwardingPipelineConfigRequest_Action_name = map[int32]string{
		0: "BIND",
		1: "VERIFY",
		2: "VERIFY_AND_WARM_INIT_BEGIN",
		3: "VERIFY_AND_WARM_INIT_BEGIN_AND_END",
		4: "WARM_INIT_END",
		5: "RECONCILE_AND_WARM_INIT_END",
	}
	SetForwardingPipelineConfigRequest_Action_value = map[string]int32{
		"BIND":                               0,
		"VERIFY":                             1,
		"VERIFY_AND_WARM_INIT_BEGIN":         2,
		"VERIFY_AND_WARM_INIT_BEGIN_AND_END": 3,
		"WARM_INIT_END":                      4,
		"RECONCILE_AND_WARM_INIT_END":        5,
	}
)

func (x SetForwardingPipelineConfigRequest_Action) Enum() *SetForwardingPipelineConfigRequest_Action {
	p := new(SetForwardingPipelineConfigRequest_Action)
	*p = x
	return p
}

func (x SetForwardingPipelineConfigRequest_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetForwardingPipelineConfigRequest_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_bfruntime_bfruntime_proto_enumTypes[6].Descriptor()
}

func (SetForwardingPipelineConfigRequest_Action) Type() protoreflect.EnumType {
	return &file_bfruntime_bfruntime_proto_enumTypes[6]
}

func (x SetForwardingPipelineConfigRequest_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetForwardingPipelineConfigRequest_Action.Descriptor instead.
func (SetForwardingPipelineConfigRequest_Action) EnumDescriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{43, 0}
}

type SetForwardingPipelineConfigRequest_DevInitMode int32

const (
	SetForwardingPipelineConfigRequest_FAST_RECONFIG SetForwardingPipelineConfigRequest_DevInitMode = 0 // This is the default device init mode.
	// Device incurs a fast-reconfig reset with minimal traffic disruption
	SetForwardingPipelineConfigRequest_HITLESS SetForwardingPipelineConfigRequest_DevInitMode = 1 // Device incurs a hitless warm init. This incurs even lesser traffic
)

// Enum value maps for SetForwardingPipelineConfigRequest_DevInitMode.
var (
	SetForwardingPipelineConfigRequest_DevInitMode_name = map[int32]string{
		0: "FAST_RECONFIG",
		1: "HITLESS",
	}
	SetForwardingPipelineConfigRequest_DevInitMode_value = map[string]int32{
		"FAST_RECONFIG": 0,
		"HITLESS":       1,
	}
)

func (x SetForwardingPipelineConfigRequest_DevInitMode) Enum() *SetForwardingPipelineConfigRequest_DevInitMode {
	p := new(SetForwardingPipelineConfigRequest_DevInitMode)
	*p = x
	return p
}

func (x SetForwardingPipelineConfigRequest_DevInitMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetForwardingPipelineConfigRequest_DevInitMode) Descriptor() protoreflect.EnumDescriptor {
	return file_bfruntime_bfruntime_proto_enumTypes[7].Descriptor()
}

func (SetForwardingPipelineConfigRequest_DevInitMode) Type() protoreflect.EnumType {
	return &file_bfruntime_bfruntime_proto_enumTypes[7]
}

func (x SetForwardingPipelineConfigRequest_DevInitMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetForwardingPipelineConfigRequest_DevInitMode.Descriptor instead.
func (SetForwardingPipelineConfigRequest_DevInitMode) EnumDescriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{43, 1}
}

//------------------------------------------------------------------------------
type WriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target   *TargetDevice `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	ClientId uint32        `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// The write batch, comprising a list of Update operations.
	Updates   []*Update              `protobuf:"bytes,3,rep,name=updates,proto3" json:"updates,omitempty"`
	Atomicity WriteRequest_Atomicity `protobuf:"varint,4,opt,name=atomicity,proto3,enum=bfrt_proto.WriteRequest_Atomicity" json:"atomicity,omitempty"`
	P4Name    string                 `protobuf:"bytes,5,opt,name=p4_name,json=p4Name,proto3" json:"p4_name,omitempty"`
}

func (x *WriteRequest) Reset() {
	*x = WriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRequest) ProtoMessage() {}

func (x *WriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteRequest.ProtoReflect.Descriptor instead.
func (*WriteRequest) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{0}
}

func (x *WriteRequest) GetTarget() *TargetDevice {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *WriteRequest) GetClientId() uint32 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *WriteRequest) GetUpdates() []*Update {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *WriteRequest) GetAtomicity() WriteRequest_Atomicity {
	if x != nil {
		return x.Atomicity
	}
	return WriteRequest_CONTINUE_ON_ERROR
}

func (x *WriteRequest) GetP4Name() string {
	if x != nil {
		return x.P4Name
	}
	return ""
}

type WriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WriteResponse) Reset() {
	*x = WriteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteResponse) ProtoMessage() {}

func (x *WriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteResponse.ProtoReflect.Descriptor instead.
func (*WriteResponse) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{1}
}

type ReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target   *TargetDevice `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	ClientId uint32        `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Entities []*Entity     `protobuf:"bytes,3,rep,name=entities,proto3" json:"entities,omitempty"`
	P4Name   string        `protobuf:"bytes,4,opt,name=p4_name,json=p4Name,proto3" json:"p4_name,omitempty"`
}

func (x *ReadRequest) Reset() {
	*x = ReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRequest) ProtoMessage() {}

func (x *ReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRequest.ProtoReflect.Descriptor instead.
func (*ReadRequest) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{2}
}

func (x *ReadRequest) GetTarget() *TargetDevice {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ReadRequest) GetClientId() uint32 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *ReadRequest) GetEntities() []*Entity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *ReadRequest) GetP4Name() string {
	if x != nil {
		return x.P4Name
	}
	return ""
}

type ReadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entities []*Entity `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *ReadResponse) Reset() {
	*x = ReadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResponse) ProtoMessage() {}

func (x *ReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResponse.ProtoReflect.Descriptor instead.
func (*ReadResponse) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{3}
}

func (x *ReadResponse) GetEntities() []*Entity {
	if x != nil {
		return x.Entities
	}
	return nil
}

type TargetDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId  uint32 `protobuf:"varint,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	PipeId    uint32 `protobuf:"varint,2,opt,name=pipe_id,json=pipeId,proto3" json:"pipe_id,omitempty"`
	Direction uint32 `protobuf:"varint,3,opt,name=direction,proto3" json:"direction,omitempty"`
	PrsrId    uint32 `protobuf:"varint,4,opt,name=prsr_id,json=prsrId,proto3" json:"prsr_id,omitempty"` // More target-specific ids.
}

func (x *TargetDevice) Reset() {
	*x = TargetDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetDevice) ProtoMessage() {}

func (x *TargetDevice) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetDevice.ProtoReflect.Descriptor instead.
func (*TargetDevice) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{4}
}

func (x *TargetDevice) GetDeviceId() uint32 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *TargetDevice) GetPipeId() uint32 {
	if x != nil {
		return x.PipeId
	}
	return 0
}

func (x *TargetDevice) GetDirection() uint32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *TargetDevice) GetPrsrId() uint32 {
	if x != nil {
		return x.PrsrId
	}
	return 0
}

type Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   Update_Type `protobuf:"varint,1,opt,name=type,proto3,enum=bfrt_proto.Update_Type" json:"type,omitempty"`
	Entity *Entity     `protobuf:"bytes,2,opt,name=entity,proto3" json:"entity,omitempty"`
}

func (x *Update) Reset() {
	*x = Update{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update) ProtoMessage() {}

func (x *Update) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update.ProtoReflect.Descriptor instead.
func (*Update) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{5}
}

func (x *Update) GetType() Update_Type {
	if x != nil {
		return x.Type
	}
	return Update_UNSPECIFIED
}

func (x *Update) GetEntity() *Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

type Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Entity:
	//	*Entity_TableEntry
	//	*Entity_TableUsage
	//	*Entity_TableAttribute
	//	*Entity_TableOperation
	//	*Entity_ObjectId
	//	*Entity_Handle
	Entity isEntity_Entity `protobuf_oneof:"entity"`
}

func (x *Entity) Reset() {
	*x = Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity) ProtoMessage() {}

func (x *Entity) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity.ProtoReflect.Descriptor instead.
func (*Entity) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{6}
}

func (m *Entity) GetEntity() isEntity_Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (x *Entity) GetTableEntry() *TableEntry {
	if x, ok := x.GetEntity().(*Entity_TableEntry); ok {
		return x.TableEntry
	}
	return nil
}

func (x *Entity) GetTableUsage() *TableUsage {
	if x, ok := x.GetEntity().(*Entity_TableUsage); ok {
		return x.TableUsage
	}
	return nil
}

func (x *Entity) GetTableAttribute() *TableAttribute {
	if x, ok := x.GetEntity().(*Entity_TableAttribute); ok {
		return x.TableAttribute
	}
	return nil
}

func (x *Entity) GetTableOperation() *TableOperation {
	if x, ok := x.GetEntity().(*Entity_TableOperation); ok {
		return x.TableOperation
	}
	return nil
}

func (x *Entity) GetObjectId() *ObjectId {
	if x, ok := x.GetEntity().(*Entity_ObjectId); ok {
		return x.ObjectId
	}
	return nil
}

func (x *Entity) GetHandle() *HandleId {
	if x, ok := x.GetEntity().(*Entity_Handle); ok {
		return x.Handle
	}
	return nil
}

type isEntity_Entity interface {
	isEntity_Entity()
}

type Entity_TableEntry struct {
	TableEntry *TableEntry `protobuf:"bytes,1,opt,name=table_entry,json=tableEntry,proto3,oneof"`
}

type Entity_TableUsage struct {
	TableUsage *TableUsage `protobuf:"bytes,2,opt,name=table_usage,json=tableUsage,proto3,oneof"`
}

type Entity_TableAttribute struct {
	TableAttribute *TableAttribute `protobuf:"bytes,3,opt,name=table_attribute,json=tableAttribute,proto3,oneof"`
}

type Entity_TableOperation struct {
	TableOperation *TableOperation `protobuf:"bytes,4,opt,name=table_operation,json=tableOperation,proto3,oneof"`
}

type Entity_ObjectId struct {
	ObjectId *ObjectId `protobuf:"bytes,5,opt,name=object_id,json=objectId,proto3,oneof"`
}

type Entity_Handle struct {
	Handle *HandleId `protobuf:"bytes,6,opt,name=handle,proto3,oneof"`
}

func (*Entity_TableEntry) isEntity_Entity() {}

func (*Entity_TableUsage) isEntity_Entity() {}

func (*Entity_TableAttribute) isEntity_Entity() {}

func (*Entity_TableOperation) isEntity_Entity() {}

func (*Entity_ObjectId) isEntity_Entity() {}

func (*Entity_Handle) isEntity_Entity() {}

type HandleId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// Types that are assignable to Value:
	//	*HandleId_Key
	//	*HandleId_HandleId
	Value isHandleId_Value `protobuf_oneof:"value"`
}

func (x *HandleId) Reset() {
	*x = HandleId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleId) ProtoMessage() {}

func (x *HandleId) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleId.ProtoReflect.Descriptor instead.
func (*HandleId) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{7}
}

func (x *HandleId) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (m *HandleId) GetValue() isHandleId_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *HandleId) GetKey() *TableKey {
	if x, ok := x.GetValue().(*HandleId_Key); ok {
		return x.Key
	}
	return nil
}

func (x *HandleId) GetHandleId() uint32 {
	if x, ok := x.GetValue().(*HandleId_HandleId); ok {
		return x.HandleId
	}
	return 0
}

type isHandleId_Value interface {
	isHandleId_Value()
}

type HandleId_Key struct {
	Key *TableKey `protobuf:"bytes,2,opt,name=key,proto3,oneof"`
}

type HandleId_HandleId struct {
	HandleId uint32 `protobuf:"varint,3,opt,name=handle_id,json=handleId,proto3,oneof"`
}

func (*HandleId_Key) isHandleId_Value() {}

func (*HandleId_HandleId) isHandleId_Value() {}

type TableEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// Types that are assignable to Value:
	//	*TableEntry_Key
	//	*TableEntry_HandleId
	Value          isTableEntry_Value `protobuf_oneof:"value"`
	Data           *TableData         `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	IsDefaultEntry bool               `protobuf:"varint,4,opt,name=is_default_entry,json=isDefaultEntry,proto3" json:"is_default_entry,omitempty"`
	// Deprecated, please use table_flags
	//
	// Deprecated: Do not use.
	TableReadFlag *TableReadFlag `protobuf:"bytes,5,opt,name=table_read_flag,json=tableReadFlag,proto3" json:"table_read_flag,omitempty"`
	// Deprecated: Do not use.
	TableModIncFlag *TableModIncFlag `protobuf:"bytes,6,opt,name=table_mod_inc_flag,json=tableModIncFlag,proto3" json:"table_mod_inc_flag,omitempty"`
	EntryTgt        *TargetDevice    `protobuf:"bytes,8,opt,name=entry_tgt,json=entryTgt,proto3" json:"entry_tgt,omitempty"`
	TableFlags      *TableFlags      `protobuf:"bytes,9,opt,name=table_flags,json=tableFlags,proto3" json:"table_flags,omitempty"`
}

func (x *TableEntry) Reset() {
	*x = TableEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableEntry) ProtoMessage() {}

func (x *TableEntry) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableEntry.ProtoReflect.Descriptor instead.
func (*TableEntry) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{8}
}

func (x *TableEntry) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (m *TableEntry) GetValue() isTableEntry_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *TableEntry) GetKey() *TableKey {
	if x, ok := x.GetValue().(*TableEntry_Key); ok {
		return x.Key
	}
	return nil
}

func (x *TableEntry) GetHandleId() uint32 {
	if x, ok := x.GetValue().(*TableEntry_HandleId); ok {
		return x.HandleId
	}
	return 0
}

func (x *TableEntry) GetData() *TableData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TableEntry) GetIsDefaultEntry() bool {
	if x != nil {
		return x.IsDefaultEntry
	}
	return false
}

// Deprecated: Do not use.
func (x *TableEntry) GetTableReadFlag() *TableReadFlag {
	if x != nil {
		return x.TableReadFlag
	}
	return nil
}

// Deprecated: Do not use.
func (x *TableEntry) GetTableModIncFlag() *TableModIncFlag {
	if x != nil {
		return x.TableModIncFlag
	}
	return nil
}

func (x *TableEntry) GetEntryTgt() *TargetDevice {
	if x != nil {
		return x.EntryTgt
	}
	return nil
}

func (x *TableEntry) GetTableFlags() *TableFlags {
	if x != nil {
		return x.TableFlags
	}
	return nil
}

type isTableEntry_Value interface {
	isTableEntry_Value()
}

type TableEntry_Key struct {
	Key *TableKey `protobuf:"bytes,2,opt,name=key,proto3,oneof"`
}

type TableEntry_HandleId struct {
	HandleId uint32 `protobuf:"varint,7,opt,name=handle_id,json=handleId,proto3,oneof"`
}

func (*TableEntry_Key) isTableEntry_Value() {}

func (*TableEntry_HandleId) isTableEntry_Value() {}

type TableUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Usage   uint32 `protobuf:"varint,2,opt,name=usage,proto3" json:"usage,omitempty"`
	// Deprecated, please use table_flags
	//
	// Deprecated: Do not use.
	TableReadFlag *TableReadFlag `protobuf:"bytes,3,opt,name=table_read_flag,json=tableReadFlag,proto3" json:"table_read_flag,omitempty"`
	TableFlags    *TableFlags    `protobuf:"bytes,4,opt,name=table_flags,json=tableFlags,proto3" json:"table_flags,omitempty"`
}

func (x *TableUsage) Reset() {
	*x = TableUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableUsage) ProtoMessage() {}

func (x *TableUsage) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableUsage.ProtoReflect.Descriptor instead.
func (*TableUsage) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{9}
}

func (x *TableUsage) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *TableUsage) GetUsage() uint32 {
	if x != nil {
		return x.Usage
	}
	return 0
}

// Deprecated: Do not use.
func (x *TableUsage) GetTableReadFlag() *TableReadFlag {
	if x != nil {
		return x.TableReadFlag
	}
	return nil
}

func (x *TableUsage) GetTableFlags() *TableFlags {
	if x != nil {
		return x.TableFlags
	}
	return nil
}

type TableAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// Types that are assignable to Attribute:
	//	*TableAttribute_IdleTable
	//	*TableAttribute_EntryScope
	//	*TableAttribute_DynKeyMask
	//	*TableAttribute_DynHashing
	//	*TableAttribute_ByteCountAdj
	//	*TableAttribute_PortStatusNotify
	//	*TableAttribute_IntvlMs
	//	*TableAttribute_PreDeviceConfig
	Attribute isTableAttribute_Attribute `protobuf_oneof:"attribute"`
}

func (x *TableAttribute) Reset() {
	*x = TableAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableAttribute) ProtoMessage() {}

func (x *TableAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableAttribute.ProtoReflect.Descriptor instead.
func (*TableAttribute) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{10}
}

func (x *TableAttribute) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (m *TableAttribute) GetAttribute() isTableAttribute_Attribute {
	if m != nil {
		return m.Attribute
	}
	return nil
}

func (x *TableAttribute) GetIdleTable() *IdleTable {
	if x, ok := x.GetAttribute().(*TableAttribute_IdleTable); ok {
		return x.IdleTable
	}
	return nil
}

func (x *TableAttribute) GetEntryScope() *EntryScope {
	if x, ok := x.GetAttribute().(*TableAttribute_EntryScope); ok {
		return x.EntryScope
	}
	return nil
}

func (x *TableAttribute) GetDynKeyMask() *DynKeyMask {
	if x, ok := x.GetAttribute().(*TableAttribute_DynKeyMask); ok {
		return x.DynKeyMask
	}
	return nil
}

func (x *TableAttribute) GetDynHashing() *DynHashing {
	if x, ok := x.GetAttribute().(*TableAttribute_DynHashing); ok {
		return x.DynHashing
	}
	return nil
}

func (x *TableAttribute) GetByteCountAdj() *ByteCountAdj {
	if x, ok := x.GetAttribute().(*TableAttribute_ByteCountAdj); ok {
		return x.ByteCountAdj
	}
	return nil
}

func (x *TableAttribute) GetPortStatusNotify() *PortStatusChg {
	if x, ok := x.GetAttribute().(*TableAttribute_PortStatusNotify); ok {
		return x.PortStatusNotify
	}
	return nil
}

func (x *TableAttribute) GetIntvlMs() *StatePullIntvl {
	if x, ok := x.GetAttribute().(*TableAttribute_IntvlMs); ok {
		return x.IntvlMs
	}
	return nil
}

func (x *TableAttribute) GetPreDeviceConfig() *PreDeviceConfig {
	if x, ok := x.GetAttribute().(*TableAttribute_PreDeviceConfig); ok {
		return x.PreDeviceConfig
	}
	return nil
}

type isTableAttribute_Attribute interface {
	isTableAttribute_Attribute()
}

type TableAttribute_IdleTable struct {
	IdleTable *IdleTable `protobuf:"bytes,2,opt,name=idle_table,json=idleTable,proto3,oneof"`
}

type TableAttribute_EntryScope struct {
	EntryScope *EntryScope `protobuf:"bytes,3,opt,name=entry_scope,json=entryScope,proto3,oneof"`
}

type TableAttribute_DynKeyMask struct {
	DynKeyMask *DynKeyMask `protobuf:"bytes,4,opt,name=dyn_key_mask,json=dynKeyMask,proto3,oneof"`
}

type TableAttribute_DynHashing struct {
	DynHashing *DynHashing `protobuf:"bytes,5,opt,name=dyn_hashing,json=dynHashing,proto3,oneof"`
}

type TableAttribute_ByteCountAdj struct {
	ByteCountAdj *ByteCountAdj `protobuf:"bytes,6,opt,name=byte_count_adj,json=byteCountAdj,proto3,oneof"`
}

type TableAttribute_PortStatusNotify struct {
	PortStatusNotify *PortStatusChg `protobuf:"bytes,7,opt,name=port_status_notify,json=portStatusNotify,proto3,oneof"`
}

type TableAttribute_IntvlMs struct {
	IntvlMs *StatePullIntvl `protobuf:"bytes,8,opt,name=intvl_ms,json=intvlMs,proto3,oneof"`
}

type TableAttribute_PreDeviceConfig struct {
	PreDeviceConfig *PreDeviceConfig `protobuf:"bytes,9,opt,name=pre_device_config,json=preDeviceConfig,proto3,oneof"`
}

func (*TableAttribute_IdleTable) isTableAttribute_Attribute() {}

func (*TableAttribute_EntryScope) isTableAttribute_Attribute() {}

func (*TableAttribute_DynKeyMask) isTableAttribute_Attribute() {}

func (*TableAttribute_DynHashing) isTableAttribute_Attribute() {}

func (*TableAttribute_ByteCountAdj) isTableAttribute_Attribute() {}

func (*TableAttribute_PortStatusNotify) isTableAttribute_Attribute() {}

func (*TableAttribute_IntvlMs) isTableAttribute_Attribute() {}

func (*TableAttribute_PreDeviceConfig) isTableAttribute_Attribute() {}

type TableOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId             uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	TableOperationsType string `protobuf:"bytes,2,opt,name=table_operations_type,json=tableOperationsType,proto3" json:"table_operations_type,omitempty"`
}

func (x *TableOperation) Reset() {
	*x = TableOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableOperation) ProtoMessage() {}

func (x *TableOperation) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableOperation.ProtoReflect.Descriptor instead.
func (*TableOperation) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{11}
}

func (x *TableOperation) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *TableOperation) GetTableOperationsType() string {
	if x != nil {
		return x.TableOperationsType
	}
	return ""
}

type TableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionId uint32       `protobuf:"varint,1,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	Fields   []*DataField `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *TableData) Reset() {
	*x = TableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableData) ProtoMessage() {}

func (x *TableData) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableData.ProtoReflect.Descriptor instead.
func (*TableData) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{12}
}

func (x *TableData) GetActionId() uint32 {
	if x != nil {
		return x.ActionId
	}
	return 0
}

func (x *TableData) GetFields() []*DataField {
	if x != nil {
		return x.Fields
	}
	return nil
}

type DataField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldId uint32 `protobuf:"varint,1,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	// All data fields are dealt with using a byte stream except for float
	// values. Float values are used for data fields for LPF and WRED table
	//
	// Types that are assignable to Value:
	//	*DataField_Stream
	//	*DataField_FloatVal
	//	*DataField_StrVal
	//	*DataField_IntArrVal
	//	*DataField_BoolArrVal
	//	*DataField_ContainerArrVal
	//	*DataField_BoolVal
	//	*DataField_StrArrVal
	Value isDataField_Value `protobuf_oneof:"value"`
}

func (x *DataField) Reset() {
	*x = DataField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataField) ProtoMessage() {}

func (x *DataField) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataField.ProtoReflect.Descriptor instead.
func (*DataField) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{13}
}

func (x *DataField) GetFieldId() uint32 {
	if x != nil {
		return x.FieldId
	}
	return 0
}

func (m *DataField) GetValue() isDataField_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *DataField) GetStream() []byte {
	if x, ok := x.GetValue().(*DataField_Stream); ok {
		return x.Stream
	}
	return nil
}

func (x *DataField) GetFloatVal() float32 {
	if x, ok := x.GetValue().(*DataField_FloatVal); ok {
		return x.FloatVal
	}
	return 0
}

func (x *DataField) GetStrVal() string {
	if x, ok := x.GetValue().(*DataField_StrVal); ok {
		return x.StrVal
	}
	return ""
}

func (x *DataField) GetIntArrVal() *DataField_IntArray {
	if x, ok := x.GetValue().(*DataField_IntArrVal); ok {
		return x.IntArrVal
	}
	return nil
}

func (x *DataField) GetBoolArrVal() *DataField_BoolArray {
	if x, ok := x.GetValue().(*DataField_BoolArrVal); ok {
		return x.BoolArrVal
	}
	return nil
}

func (x *DataField) GetContainerArrVal() *DataField_ContainerArray {
	if x, ok := x.GetValue().(*DataField_ContainerArrVal); ok {
		return x.ContainerArrVal
	}
	return nil
}

func (x *DataField) GetBoolVal() bool {
	if x, ok := x.GetValue().(*DataField_BoolVal); ok {
		return x.BoolVal
	}
	return false
}

func (x *DataField) GetStrArrVal() *DataField_StrArray {
	if x, ok := x.GetValue().(*DataField_StrArrVal); ok {
		return x.StrArrVal
	}
	return nil
}

type isDataField_Value interface {
	isDataField_Value()
}

type DataField_Stream struct {
	Stream []byte `protobuf:"bytes,2,opt,name=stream,proto3,oneof"`
}

type DataField_FloatVal struct {
	FloatVal float32 `protobuf:"fixed32,3,opt,name=float_val,json=floatVal,proto3,oneof"`
}

type DataField_StrVal struct {
	StrVal string `protobuf:"bytes,4,opt,name=str_val,json=strVal,proto3,oneof"`
}

type DataField_IntArrVal struct {
	IntArrVal *DataField_IntArray `protobuf:"bytes,5,opt,name=int_arr_val,json=intArrVal,proto3,oneof"`
}

type DataField_BoolArrVal struct {
	BoolArrVal *DataField_BoolArray `protobuf:"bytes,6,opt,name=bool_arr_val,json=boolArrVal,proto3,oneof"`
}

type DataField_ContainerArrVal struct {
	ContainerArrVal *DataField_ContainerArray `protobuf:"bytes,7,opt,name=container_arr_val,json=containerArrVal,proto3,oneof"`
}

type DataField_BoolVal struct {
	BoolVal bool `protobuf:"varint,8,opt,name=bool_val,json=boolVal,proto3,oneof"`
}

type DataField_StrArrVal struct {
	StrArrVal *DataField_StrArray `protobuf:"bytes,9,opt,name=str_arr_val,json=strArrVal,proto3,oneof"`
}

func (*DataField_Stream) isDataField_Value() {}

func (*DataField_FloatVal) isDataField_Value() {}

func (*DataField_StrVal) isDataField_Value() {}

func (*DataField_IntArrVal) isDataField_Value() {}

func (*DataField_BoolArrVal) isDataField_Value() {}

func (*DataField_ContainerArrVal) isDataField_Value() {}

func (*DataField_BoolVal) isDataField_Value() {}

func (*DataField_StrArrVal) isDataField_Value() {}

type TableKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*KeyField `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *TableKey) Reset() {
	*x = TableKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableKey) ProtoMessage() {}

func (x *TableKey) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableKey.ProtoReflect.Descriptor instead.
func (*TableKey) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{14}
}

func (x *TableKey) GetFields() []*KeyField {
	if x != nil {
		return x.Fields
	}
	return nil
}

type KeyField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldId uint32 `protobuf:"varint,1,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	// Types that are assignable to MatchType:
	//	*KeyField_Exact_
	//	*KeyField_Ternary_
	//	*KeyField_Lpm
	//	*KeyField_Range_
	//	*KeyField_Optional_
	MatchType isKeyField_MatchType `protobuf_oneof:"match_type"`
}

func (x *KeyField) Reset() {
	*x = KeyField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyField) ProtoMessage() {}

func (x *KeyField) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyField.ProtoReflect.Descriptor instead.
func (*KeyField) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{15}
}

func (x *KeyField) GetFieldId() uint32 {
	if x != nil {
		return x.FieldId
	}
	return 0
}

func (m *KeyField) GetMatchType() isKeyField_MatchType {
	if m != nil {
		return m.MatchType
	}
	return nil
}

func (x *KeyField) GetExact() *KeyField_Exact {
	if x, ok := x.GetMatchType().(*KeyField_Exact_); ok {
		return x.Exact
	}
	return nil
}

func (x *KeyField) GetTernary() *KeyField_Ternary {
	if x, ok := x.GetMatchType().(*KeyField_Ternary_); ok {
		return x.Ternary
	}
	return nil
}

func (x *KeyField) GetLpm() *KeyField_LPM {
	if x, ok := x.GetMatchType().(*KeyField_Lpm); ok {
		return x.Lpm
	}
	return nil
}

func (x *KeyField) GetRange() *KeyField_Range {
	if x, ok := x.GetMatchType().(*KeyField_Range_); ok {
		return x.Range
	}
	return nil
}

func (x *KeyField) GetOptional() *KeyField_Optional {
	if x, ok := x.GetMatchType().(*KeyField_Optional_); ok {
		return x.Optional
	}
	return nil
}

type isKeyField_MatchType interface {
	isKeyField_MatchType()
}

type KeyField_Exact_ struct {
	Exact *KeyField_Exact `protobuf:"bytes,2,opt,name=exact,proto3,oneof"`
}

type KeyField_Ternary_ struct {
	Ternary *KeyField_Ternary `protobuf:"bytes,3,opt,name=ternary,proto3,oneof"`
}

type KeyField_Lpm struct {
	Lpm *KeyField_LPM `protobuf:"bytes,4,opt,name=lpm,proto3,oneof"`
}

type KeyField_Range_ struct {
	Range *KeyField_Range `protobuf:"bytes,5,opt,name=range,proto3,oneof"`
}

type KeyField_Optional_ struct {
	Optional *KeyField_Optional `protobuf:"bytes,6,opt,name=optional,proto3,oneof"`
}

func (*KeyField_Exact_) isKeyField_MatchType() {}

func (*KeyField_Ternary_) isKeyField_MatchType() {}

func (*KeyField_Lpm) isKeyField_MatchType() {}

func (*KeyField_Range_) isKeyField_MatchType() {}

func (*KeyField_Optional_) isKeyField_MatchType() {}

// Deprecated, please use TableFlags
type TableReadFlag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromHw  bool `protobuf:"varint,1,opt,name=from_hw,json=fromHw,proto3" json:"from_hw,omitempty"`
	KeyOnly bool `protobuf:"varint,2,opt,name=key_only,json=keyOnly,proto3" json:"key_only,omitempty"`
}

func (x *TableReadFlag) Reset() {
	*x = TableReadFlag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableReadFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableReadFlag) ProtoMessage() {}

func (x *TableReadFlag) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableReadFlag.ProtoReflect.Descriptor instead.
func (*TableReadFlag) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{16}
}

func (x *TableReadFlag) GetFromHw() bool {
	if x != nil {
		return x.FromHw
	}
	return false
}

func (x *TableReadFlag) GetKeyOnly() bool {
	if x != nil {
		return x.KeyOnly
	}
	return false
}

type TableFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromHw   bool `protobuf:"varint,1,opt,name=from_hw,json=fromHw,proto3" json:"from_hw,omitempty"`
	KeyOnly  bool `protobuf:"varint,2,opt,name=key_only,json=keyOnly,proto3" json:"key_only,omitempty"`
	ModDel   bool `protobuf:"varint,3,opt,name=mod_del,json=modDel,proto3" json:"mod_del,omitempty"`
	ResetTtl bool `protobuf:"varint,4,opt,name=reset_ttl,json=resetTtl,proto3" json:"reset_ttl,omitempty"`
}

func (x *TableFlags) Reset() {
	*x = TableFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableFlags) ProtoMessage() {}

func (x *TableFlags) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableFlags.ProtoReflect.Descriptor instead.
func (*TableFlags) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{17}
}

func (x *TableFlags) GetFromHw() bool {
	if x != nil {
		return x.FromHw
	}
	return false
}

func (x *TableFlags) GetKeyOnly() bool {
	if x != nil {
		return x.KeyOnly
	}
	return false
}

func (x *TableFlags) GetModDel() bool {
	if x != nil {
		return x.ModDel
	}
	return false
}

func (x *TableFlags) GetResetTtl() bool {
	if x != nil {
		return x.ResetTtl
	}
	return false
}

// Deprecated, please use TableFlags
type TableModIncFlag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type TableModIncFlag_Type `protobuf:"varint,1,opt,name=type,proto3,enum=bfrt_proto.TableModIncFlag_Type" json:"type,omitempty"`
}

func (x *TableModIncFlag) Reset() {
	*x = TableModIncFlag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableModIncFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableModIncFlag) ProtoMessage() {}

func (x *TableModIncFlag) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableModIncFlag.ProtoReflect.Descriptor instead.
func (*TableModIncFlag) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{18}
}

func (x *TableModIncFlag) GetType() TableModIncFlag_Type {
	if x != nil {
		return x.Type
	}
	return TableModIncFlag_MOD_INC_ADD
}

type KeyFieldMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldId uint32 `protobuf:"varint,1,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	Mask    []byte `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *KeyFieldMask) Reset() {
	*x = KeyFieldMask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyFieldMask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyFieldMask) ProtoMessage() {}

func (x *KeyFieldMask) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyFieldMask.ProtoReflect.Descriptor instead.
func (*KeyFieldMask) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{19}
}

func (x *KeyFieldMask) GetFieldId() uint32 {
	if x != nil {
		return x.FieldId
	}
	return 0
}

func (x *KeyFieldMask) GetMask() []byte {
	if x != nil {
		return x.Mask
	}
	return nil
}

type DynKeyMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*KeyFieldMask `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *DynKeyMask) Reset() {
	*x = DynKeyMask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynKeyMask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynKeyMask) ProtoMessage() {}

func (x *DynKeyMask) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynKeyMask.ProtoReflect.Descriptor instead.
func (*DynKeyMask) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{20}
}

func (x *DynKeyMask) GetFields() []*KeyFieldMask {
	if x != nil {
		return x.Fields
	}
	return nil
}

type DynHashing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alg  uint32 `protobuf:"varint,1,opt,name=alg,proto3" json:"alg,omitempty"`
	Seed uint64 `protobuf:"varint,2,opt,name=seed,proto3" json:"seed,omitempty"`
}

func (x *DynHashing) Reset() {
	*x = DynHashing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynHashing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynHashing) ProtoMessage() {}

func (x *DynHashing) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynHashing.ProtoReflect.Descriptor instead.
func (*DynHashing) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{21}
}

func (x *DynHashing) GetAlg() uint32 {
	if x != nil {
		return x.Alg
	}
	return 0
}

func (x *DynHashing) GetSeed() uint64 {
	if x != nil {
		return x.Seed
	}
	return 0
}

type ByteCountAdj struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ByteCountAdjust int32 `protobuf:"varint,1,opt,name=byte_count_adjust,json=byteCountAdjust,proto3" json:"byte_count_adjust,omitempty"`
}

func (x *ByteCountAdj) Reset() {
	*x = ByteCountAdj{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByteCountAdj) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByteCountAdj) ProtoMessage() {}

func (x *ByteCountAdj) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByteCountAdj.ProtoReflect.Descriptor instead.
func (*ByteCountAdj) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{22}
}

func (x *ByteCountAdj) GetByteCountAdjust() int32 {
	if x != nil {
		return x.ByteCountAdjust
	}
	return 0
}

type IdleTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TtlQueryInterval uint32                  `protobuf:"varint,1,opt,name=ttl_query_interval,json=ttlQueryInterval,proto3" json:"ttl_query_interval,omitempty"`
	MaxTtl           uint32                  `protobuf:"varint,2,opt,name=max_ttl,json=maxTtl,proto3" json:"max_ttl,omitempty"`
	MinTtl           uint32                  `protobuf:"varint,3,opt,name=min_ttl,json=minTtl,proto3" json:"min_ttl,omitempty"`
	IdleTableMode    IdleTable_IdleTableMode `protobuf:"varint,4,opt,name=idle_table_mode,json=idleTableMode,proto3,enum=bfrt_proto.IdleTable_IdleTableMode" json:"idle_table_mode,omitempty"`
	Enable           bool                    `protobuf:"varint,5,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *IdleTable) Reset() {
	*x = IdleTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdleTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdleTable) ProtoMessage() {}

func (x *IdleTable) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdleTable.ProtoReflect.Descriptor instead.
func (*IdleTable) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{23}
}

func (x *IdleTable) GetTtlQueryInterval() uint32 {
	if x != nil {
		return x.TtlQueryInterval
	}
	return 0
}

func (x *IdleTable) GetMaxTtl() uint32 {
	if x != nil {
		return x.MaxTtl
	}
	return 0
}

func (x *IdleTable) GetMinTtl() uint32 {
	if x != nil {
		return x.MinTtl
	}
	return 0
}

func (x *IdleTable) GetIdleTableMode() IdleTable_IdleTableMode {
	if x != nil {
		return x.IdleTableMode
	}
	return IdleTable_IDLE_TABLE_POLL_MODE
}

func (x *IdleTable) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type StatePullIntvl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntvlVal uint32 `protobuf:"varint,1,opt,name=intvl_val,json=intvlVal,proto3" json:"intvl_val,omitempty"`
}

func (x *StatePullIntvl) Reset() {
	*x = StatePullIntvl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatePullIntvl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatePullIntvl) ProtoMessage() {}

func (x *StatePullIntvl) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatePullIntvl.ProtoReflect.Descriptor instead.
func (*StatePullIntvl) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{24}
}

func (x *StatePullIntvl) GetIntvlVal() uint32 {
	if x != nil {
		return x.IntvlVal
	}
	return 0
}

type PortStatusChg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *PortStatusChg) Reset() {
	*x = PortStatusChg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortStatusChg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortStatusChg) ProtoMessage() {}

func (x *PortStatusChg) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortStatusChg.ProtoReflect.Descriptor instead.
func (*PortStatusChg) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{25}
}

func (x *PortStatusChg) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type Mode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Scope:
	//	*Mode_Predef
	//	*Mode_UserDefined
	Scope isMode_Scope `protobuf_oneof:"scope"`
	Args  uint32       `protobuf:"varint,3,opt,name=args,proto3" json:"args,omitempty"`
}

func (x *Mode) Reset() {
	*x = Mode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mode) ProtoMessage() {}

func (x *Mode) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mode.ProtoReflect.Descriptor instead.
func (*Mode) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{26}
}

func (m *Mode) GetScope() isMode_Scope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (x *Mode) GetPredef() Mode_PredefinedMode {
	if x, ok := x.GetScope().(*Mode_Predef); ok {
		return x.Predef
	}
	return Mode_ALL
}

func (x *Mode) GetUserDefined() uint32 {
	if x, ok := x.GetScope().(*Mode_UserDefined); ok {
		return x.UserDefined
	}
	return 0
}

func (x *Mode) GetArgs() uint32 {
	if x != nil {
		return x.Args
	}
	return 0
}

type isMode_Scope interface {
	isMode_Scope()
}

type Mode_Predef struct {
	Predef Mode_PredefinedMode `protobuf:"varint,1,opt,name=predef,proto3,enum=bfrt_proto.Mode_PredefinedMode,oneof"`
}

type Mode_UserDefined struct {
	UserDefined uint32 `protobuf:"varint,2,opt,name=user_defined,json=userDefined,proto3,oneof"`
}

func (*Mode_Predef) isMode_Scope() {}

func (*Mode_UserDefined) isMode_Scope() {}

type PreGlobalRid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlobalRid uint32 `protobuf:"varint,1,opt,name=global_rid,json=globalRid,proto3" json:"global_rid,omitempty"`
}

func (x *PreGlobalRid) Reset() {
	*x = PreGlobalRid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreGlobalRid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreGlobalRid) ProtoMessage() {}

func (x *PreGlobalRid) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreGlobalRid.ProtoReflect.Descriptor instead.
func (*PreGlobalRid) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{27}
}

func (x *PreGlobalRid) GetGlobalRid() uint32 {
	if x != nil {
		return x.GlobalRid
	}
	return 0
}

type PrePortProtection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *PrePortProtection) Reset() {
	*x = PrePortProtection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrePortProtection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrePortProtection) ProtoMessage() {}

func (x *PrePortProtection) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrePortProtection.ProtoReflect.Descriptor instead.
func (*PrePortProtection) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{28}
}

func (x *PrePortProtection) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type PreFastFailover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *PreFastFailover) Reset() {
	*x = PreFastFailover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreFastFailover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreFastFailover) ProtoMessage() {}

func (x *PreFastFailover) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreFastFailover.ProtoReflect.Descriptor instead.
func (*PreFastFailover) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{29}
}

func (x *PreFastFailover) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type PreMaxNodesBeforeYield struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *PreMaxNodesBeforeYield) Reset() {
	*x = PreMaxNodesBeforeYield{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreMaxNodesBeforeYield) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreMaxNodesBeforeYield) ProtoMessage() {}

func (x *PreMaxNodesBeforeYield) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreMaxNodesBeforeYield.ProtoReflect.Descriptor instead.
func (*PreMaxNodesBeforeYield) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{30}
}

func (x *PreMaxNodesBeforeYield) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type PreMaxNodeThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeCount    uint32 `protobuf:"varint,1,opt,name=node_count,json=nodeCount,proto3" json:"node_count,omitempty"`
	PortLagCount uint32 `protobuf:"varint,2,opt,name=port_lag_count,json=portLagCount,proto3" json:"port_lag_count,omitempty"`
}

func (x *PreMaxNodeThreshold) Reset() {
	*x = PreMaxNodeThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreMaxNodeThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreMaxNodeThreshold) ProtoMessage() {}

func (x *PreMaxNodeThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreMaxNodeThreshold.ProtoReflect.Descriptor instead.
func (*PreMaxNodeThreshold) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{31}
}

func (x *PreMaxNodeThreshold) GetNodeCount() uint32 {
	if x != nil {
		return x.NodeCount
	}
	return 0
}

func (x *PreMaxNodeThreshold) GetPortLagCount() uint32 {
	if x != nil {
		return x.PortLagCount
	}
	return 0
}

type PreDeviceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreGlobalRid           *PreGlobalRid           `protobuf:"bytes,1,opt,name=pre_global_rid,json=preGlobalRid,proto3" json:"pre_global_rid,omitempty"`
	PrePortProtection      *PrePortProtection      `protobuf:"bytes,2,opt,name=pre_port_protection,json=prePortProtection,proto3" json:"pre_port_protection,omitempty"`
	PreFastFailover        *PreFastFailover        `protobuf:"bytes,3,opt,name=pre_fast_failover,json=preFastFailover,proto3" json:"pre_fast_failover,omitempty"`
	PreMaxNodesBeforeYield *PreMaxNodesBeforeYield `protobuf:"bytes,4,opt,name=pre_max_nodes_before_yield,json=preMaxNodesBeforeYield,proto3" json:"pre_max_nodes_before_yield,omitempty"`
	PreMaxNodeThreshold    *PreMaxNodeThreshold    `protobuf:"bytes,5,opt,name=pre_max_node_threshold,json=preMaxNodeThreshold,proto3" json:"pre_max_node_threshold,omitempty"`
}

func (x *PreDeviceConfig) Reset() {
	*x = PreDeviceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreDeviceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreDeviceConfig) ProtoMessage() {}

func (x *PreDeviceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreDeviceConfig.ProtoReflect.Descriptor instead.
func (*PreDeviceConfig) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{32}
}

func (x *PreDeviceConfig) GetPreGlobalRid() *PreGlobalRid {
	if x != nil {
		return x.PreGlobalRid
	}
	return nil
}

func (x *PreDeviceConfig) GetPrePortProtection() *PrePortProtection {
	if x != nil {
		return x.PrePortProtection
	}
	return nil
}

func (x *PreDeviceConfig) GetPreFastFailover() *PreFastFailover {
	if x != nil {
		return x.PreFastFailover
	}
	return nil
}

func (x *PreDeviceConfig) GetPreMaxNodesBeforeYield() *PreMaxNodesBeforeYield {
	if x != nil {
		return x.PreMaxNodesBeforeYield
	}
	return nil
}

func (x *PreDeviceConfig) GetPreMaxNodeThreshold() *PreMaxNodeThreshold {
	if x != nil {
		return x.PreMaxNodeThreshold
	}
	return nil
}

type EntryScope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GressScope *Mode `protobuf:"bytes,1,opt,name=gress_scope,json=gressScope,proto3" json:"gress_scope,omitempty"`
	PipeScope  *Mode `protobuf:"bytes,2,opt,name=pipe_scope,json=pipeScope,proto3" json:"pipe_scope,omitempty"`
	PrsrScope  *Mode `protobuf:"bytes,3,opt,name=prsr_scope,json=prsrScope,proto3" json:"prsr_scope,omitempty"`
}

func (x *EntryScope) Reset() {
	*x = EntryScope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntryScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntryScope) ProtoMessage() {}

func (x *EntryScope) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntryScope.ProtoReflect.Descriptor instead.
func (*EntryScope) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{33}
}

func (x *EntryScope) GetGressScope() *Mode {
	if x != nil {
		return x.GressScope
	}
	return nil
}

func (x *EntryScope) GetPipeScope() *Mode {
	if x != nil {
		return x.PipeScope
	}
	return nil
}

func (x *EntryScope) GetPrsrScope() *Mode {
	if x != nil {
		return x.PrsrScope
	}
	return nil
}

type ObjectId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Object:
	//	*ObjectId_TableObject_
	//	*ObjectId_LearnObject_
	Object isObjectId_Object `protobuf_oneof:"object"`
	Id     uint32            `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ObjectId) Reset() {
	*x = ObjectId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectId) ProtoMessage() {}

func (x *ObjectId) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectId.ProtoReflect.Descriptor instead.
func (*ObjectId) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{34}
}

func (m *ObjectId) GetObject() isObjectId_Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (x *ObjectId) GetTableObject() *ObjectId_TableObject {
	if x, ok := x.GetObject().(*ObjectId_TableObject_); ok {
		return x.TableObject
	}
	return nil
}

func (x *ObjectId) GetLearnObject() *ObjectId_LearnObject {
	if x, ok := x.GetObject().(*ObjectId_LearnObject_); ok {
		return x.LearnObject
	}
	return nil
}

func (x *ObjectId) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type isObjectId_Object interface {
	isObjectId_Object()
}

type ObjectId_TableObject_ struct {
	TableObject *ObjectId_TableObject `protobuf:"bytes,1,opt,name=table_object,json=tableObject,proto3,oneof"`
}

type ObjectId_LearnObject_ struct {
	LearnObject *ObjectId_LearnObject `protobuf:"bytes,2,opt,name=learn_object,json=learnObject,proto3,oneof"`
}

func (*ObjectId_TableObject_) isObjectId_Object() {}

func (*ObjectId_LearnObject_) isObjectId_Object() {}

type StreamMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId uint32 `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Types that are assignable to Update:
	//	*StreamMessageRequest_Subscribe
	//	*StreamMessageRequest_DigestAck
	Update isStreamMessageRequest_Update `protobuf_oneof:"update"`
}

func (x *StreamMessageRequest) Reset() {
	*x = StreamMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMessageRequest) ProtoMessage() {}

func (x *StreamMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMessageRequest.ProtoReflect.Descriptor instead.
func (*StreamMessageRequest) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{35}
}

func (x *StreamMessageRequest) GetClientId() uint32 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (m *StreamMessageRequest) GetUpdate() isStreamMessageRequest_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *StreamMessageRequest) GetSubscribe() *Subscribe {
	if x, ok := x.GetUpdate().(*StreamMessageRequest_Subscribe); ok {
		return x.Subscribe
	}
	return nil
}

func (x *StreamMessageRequest) GetDigestAck() *DigestListAck {
	if x, ok := x.GetUpdate().(*StreamMessageRequest_DigestAck); ok {
		return x.DigestAck
	}
	return nil
}

type isStreamMessageRequest_Update interface {
	isStreamMessageRequest_Update()
}

type StreamMessageRequest_Subscribe struct {
	Subscribe *Subscribe `protobuf:"bytes,2,opt,name=subscribe,proto3,oneof"`
}

type StreamMessageRequest_DigestAck struct {
	DigestAck *DigestListAck `protobuf:"bytes,3,opt,name=digest_ack,json=digestAck,proto3,oneof"`
}

func (*StreamMessageRequest_Subscribe) isStreamMessageRequest_Update() {}

func (*StreamMessageRequest_DigestAck) isStreamMessageRequest_Update() {}

type Subscribe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	IsMaster bool `protobuf:"varint,1,opt,name=is_master,json=isMaster,proto3" json:"is_master,omitempty"`
	// Master for Warm Init messages.
	// Deprecated and not needed anymore.
	// Keeping for backward compatibility.
	DeviceId      uint32                   `protobuf:"varint,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"` // Device ID
	Notifications *Subscribe_Notifications `protobuf:"bytes,3,opt,name=notifications,proto3" json:"notifications,omitempty"`        // Contains which notifications need to be
	// enabled for this client. Default value of
	// these notifications are false.
	Status *status.Status `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"` // The controller doesn't populate this field.
}

func (x *Subscribe) Reset() {
	*x = Subscribe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscribe) ProtoMessage() {}

func (x *Subscribe) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscribe.ProtoReflect.Descriptor instead.
func (*Subscribe) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{36}
}

// Deprecated: Do not use.
func (x *Subscribe) GetIsMaster() bool {
	if x != nil {
		return x.IsMaster
	}
	return false
}

func (x *Subscribe) GetDeviceId() uint32 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *Subscribe) GetNotifications() *Subscribe_Notifications {
	if x != nil {
		return x.Notifications
	}
	return nil
}

func (x *Subscribe) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type DigestListAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DigestId uint32 `protobuf:"varint,1,opt,name=digest_id,json=digestId,proto3" json:"digest_id,omitempty"`
	ListId   uint32 `protobuf:"varint,2,opt,name=list_id,json=listId,proto3" json:"list_id,omitempty"`
}

func (x *DigestListAck) Reset() {
	*x = DigestListAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DigestListAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigestListAck) ProtoMessage() {}

func (x *DigestListAck) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigestListAck.ProtoReflect.Descriptor instead.
func (*DigestListAck) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{37}
}

func (x *DigestListAck) GetDigestId() uint32 {
	if x != nil {
		return x.DigestId
	}
	return 0
}

func (x *DigestListAck) GetListId() uint32 {
	if x != nil {
		return x.ListId
	}
	return 0
}

type StreamMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//	*StreamMessageResponse_Subscribe
	//	*StreamMessageResponse_Digest
	//	*StreamMessageResponse_IdleTimeoutNotification
	//	*StreamMessageResponse_PortStatusChangeNotification
	//	*StreamMessageResponse_SetForwardingPipelineConfigResponse
	Update isStreamMessageResponse_Update `protobuf_oneof:"update"`
}

func (x *StreamMessageResponse) Reset() {
	*x = StreamMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMessageResponse) ProtoMessage() {}

func (x *StreamMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMessageResponse.ProtoReflect.Descriptor instead.
func (*StreamMessageResponse) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{38}
}

func (m *StreamMessageResponse) GetUpdate() isStreamMessageResponse_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *StreamMessageResponse) GetSubscribe() *Subscribe {
	if x, ok := x.GetUpdate().(*StreamMessageResponse_Subscribe); ok {
		return x.Subscribe
	}
	return nil
}

func (x *StreamMessageResponse) GetDigest() *DigestList {
	if x, ok := x.GetUpdate().(*StreamMessageResponse_Digest); ok {
		return x.Digest
	}
	return nil
}

func (x *StreamMessageResponse) GetIdleTimeoutNotification() *IdleTimeoutNotification {
	if x, ok := x.GetUpdate().(*StreamMessageResponse_IdleTimeoutNotification); ok {
		return x.IdleTimeoutNotification
	}
	return nil
}

func (x *StreamMessageResponse) GetPortStatusChangeNotification() *PortStatusChgNotification {
	if x, ok := x.GetUpdate().(*StreamMessageResponse_PortStatusChangeNotification); ok {
		return x.PortStatusChangeNotification
	}
	return nil
}

func (x *StreamMessageResponse) GetSetForwardingPipelineConfigResponse() *SetForwardingPipelineConfigResponse {
	if x, ok := x.GetUpdate().(*StreamMessageResponse_SetForwardingPipelineConfigResponse); ok {
		return x.SetForwardingPipelineConfigResponse
	}
	return nil
}

type isStreamMessageResponse_Update interface {
	isStreamMessageResponse_Update()
}

type StreamMessageResponse_Subscribe struct {
	Subscribe *Subscribe `protobuf:"bytes,1,opt,name=subscribe,proto3,oneof"` // This message is only used to let the server know
}

type StreamMessageResponse_Digest struct {
	// of the existence of client with this client_id
	Digest *DigestList `protobuf:"bytes,2,opt,name=digest,proto3,oneof"` // Learn Digest
}

type StreamMessageResponse_IdleTimeoutNotification struct {
	IdleTimeoutNotification *IdleTimeoutNotification `protobuf:"bytes,3,opt,name=idle_timeout_notification,json=idleTimeoutNotification,proto3,oneof"` // Idle timeout notification
}

type StreamMessageResponse_PortStatusChangeNotification struct {
	PortStatusChangeNotification *PortStatusChgNotification `protobuf:"bytes,4,opt,name=port_status_change_notification,json=portStatusChangeNotification,proto3,oneof"` // Port status change notification
}

type StreamMessageResponse_SetForwardingPipelineConfigResponse struct {
	SetForwardingPipelineConfigResponse *SetForwardingPipelineConfigResponse `protobuf:"bytes,5,opt,name=set_forwarding_pipeline_config_response,json=setForwardingPipelineConfigResponse,proto3,oneof"` // Response for a SetForwardingPipelineConfigRequest is sent here
}

func (*StreamMessageResponse_Subscribe) isStreamMessageResponse_Update() {}

func (*StreamMessageResponse_Digest) isStreamMessageResponse_Update() {}

func (*StreamMessageResponse_IdleTimeoutNotification) isStreamMessageResponse_Update() {}

func (*StreamMessageResponse_PortStatusChangeNotification) isStreamMessageResponse_Update() {}

func (*StreamMessageResponse_SetForwardingPipelineConfigResponse) isStreamMessageResponse_Update() {}

type SubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Error `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SubscribeResponse) Reset() {
	*x = SubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResponse) ProtoMessage() {}

func (x *SubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResponse.ProtoReflect.Descriptor instead.
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{39}
}

func (x *SubscribeResponse) GetStatus() *Error {
	if x != nil {
		return x.Status
	}
	return nil
}

type DigestList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifies the digest extern instance
	DigestId uint32        `protobuf:"varint,1,opt,name=digest_id,json=digestId,proto3" json:"digest_id,omitempty"`
	ListId   uint32        `protobuf:"varint,2,opt,name=list_id,json=listId,proto3" json:"list_id,omitempty"`
	Data     []*TableData  `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Target   *TargetDevice `protobuf:"bytes,4,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *DigestList) Reset() {
	*x = DigestList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DigestList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigestList) ProtoMessage() {}

func (x *DigestList) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigestList.ProtoReflect.Descriptor instead.
func (*DigestList) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{40}
}

func (x *DigestList) GetDigestId() uint32 {
	if x != nil {
		return x.DigestId
	}
	return 0
}

func (x *DigestList) GetListId() uint32 {
	if x != nil {
		return x.ListId
	}
	return 0
}

func (x *DigestList) GetData() []*TableData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DigestList) GetTarget() *TargetDevice {
	if x != nil {
		return x.Target
	}
	return nil
}

type IdleTimeoutNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Only "key" fields are required to be set in each TableEntry.
	Target     *TargetDevice `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	TableEntry *TableEntry   `protobuf:"bytes,2,opt,name=table_entry,json=tableEntry,proto3" json:"table_entry,omitempty"`
}

func (x *IdleTimeoutNotification) Reset() {
	*x = IdleTimeoutNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdleTimeoutNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdleTimeoutNotification) ProtoMessage() {}

func (x *IdleTimeoutNotification) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdleTimeoutNotification.ProtoReflect.Descriptor instead.
func (*IdleTimeoutNotification) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{41}
}

func (x *IdleTimeoutNotification) GetTarget() *TargetDevice {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *IdleTimeoutNotification) GetTableEntry() *TableEntry {
	if x != nil {
		return x.TableEntry
	}
	return nil
}

type PortStatusChgNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Only "key" fields are required to be set in each TableEntry.
	TableEntry *TableEntry `protobuf:"bytes,1,opt,name=table_entry,json=tableEntry,proto3" json:"table_entry,omitempty"`
	PortUp     bool        `protobuf:"varint,2,opt,name=port_up,json=portUp,proto3" json:"port_up,omitempty"`
}

func (x *PortStatusChgNotification) Reset() {
	*x = PortStatusChgNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortStatusChgNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortStatusChgNotification) ProtoMessage() {}

func (x *PortStatusChgNotification) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortStatusChgNotification.ProtoReflect.Descriptor instead.
func (*PortStatusChgNotification) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{42}
}

func (x *PortStatusChgNotification) GetTableEntry() *TableEntry {
	if x != nil {
		return x.TableEntry
	}
	return nil
}

func (x *PortStatusChgNotification) GetPortUp() bool {
	if x != nil {
		return x.PortUp
	}
	return false
}

//-----------------------------------------------------------------------------
// SetForwardingPipelineConfig RPC takes in this message. It should contain
// details of the entire device.
type SetForwardingPipelineConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId    uint32                                         `protobuf:"varint,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`                                                                           // Device ID
	ClientId    uint32                                         `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`                                                                           // Client ID
	Action      SetForwardingPipelineConfigRequest_Action      `protobuf:"varint,3,opt,name=action,proto3,enum=bfrt_proto.SetForwardingPipelineConfigRequest_Action" json:"action,omitempty"`                                     // action
	DevInitMode SetForwardingPipelineConfigRequest_DevInitMode `protobuf:"varint,4,opt,name=dev_init_mode,json=devInitMode,proto3,enum=bfrt_proto.SetForwardingPipelineConfigRequest_DevInitMode" json:"dev_init_mode,omitempty"` // warm init mode. Fast reconfig or Hitless
	BasePath    string                                         `protobuf:"bytes,5,opt,name=base_path,json=basePath,proto3" json:"base_path,omitempty"`                                                                            // The base path where the config is wished to be
	// stored. If empty, then current directory is used
	Config []*ForwardingPipelineConfig `protobuf:"bytes,6,rep,name=config,proto3" json:"config,omitempty"` // Device's config
}

func (x *SetForwardingPipelineConfigRequest) Reset() {
	*x = SetForwardingPipelineConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetForwardingPipelineConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetForwardingPipelineConfigRequest) ProtoMessage() {}

func (x *SetForwardingPipelineConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetForwardingPipelineConfigRequest.ProtoReflect.Descriptor instead.
func (*SetForwardingPipelineConfigRequest) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{43}
}

func (x *SetForwardingPipelineConfigRequest) GetDeviceId() uint32 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *SetForwardingPipelineConfigRequest) GetClientId() uint32 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *SetForwardingPipelineConfigRequest) GetAction() SetForwardingPipelineConfigRequest_Action {
	if x != nil {
		return x.Action
	}
	return SetForwardingPipelineConfigRequest_BIND
}

func (x *SetForwardingPipelineConfigRequest) GetDevInitMode() SetForwardingPipelineConfigRequest_DevInitMode {
	if x != nil {
		return x.DevInitMode
	}
	return SetForwardingPipelineConfigRequest_FAST_RECONFIG
}

func (x *SetForwardingPipelineConfigRequest) GetBasePath() string {
	if x != nil {
		return x.BasePath
	}
	return ""
}

func (x *SetForwardingPipelineConfigRequest) GetConfig() []*ForwardingPipelineConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type SetForwardingPipelineConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetForwardingPipelineConfigResponseType SetForwardingPipelineConfigResponseType `protobuf:"varint,1,opt,name=set_forwarding_pipeline_config_response_type,json=setForwardingPipelineConfigResponseType,proto3,enum=bfrt_proto.SetForwardingPipelineConfigResponseType" json:"set_forwarding_pipeline_config_response_type,omitempty"`
}

func (x *SetForwardingPipelineConfigResponse) Reset() {
	*x = SetForwardingPipelineConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetForwardingPipelineConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetForwardingPipelineConfigResponse) ProtoMessage() {}

func (x *SetForwardingPipelineConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetForwardingPipelineConfigResponse.ProtoReflect.Descriptor instead.
func (*SetForwardingPipelineConfigResponse) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{44}
}

func (x *SetForwardingPipelineConfigResponse) GetSetForwardingPipelineConfigResponseType() SetForwardingPipelineConfigResponseType {
	if x != nil {
		return x.SetForwardingPipelineConfigResponseType
	}
	return SetForwardingPipelineConfigResponseType_WARM_INIT_STARTED
}

// This message contains config of a SINGLE program. The reason config is a
// repeated field in the SetForwardingPipelineConfigRequest is because a
// device can have multiple programs.
type ForwardingPipelineConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P4Name        string                              `protobuf:"bytes,1,opt,name=p4_name,json=p4Name,proto3" json:"p4_name,omitempty"`                      // P4 program name
	BfruntimeInfo []byte                              `protobuf:"bytes,2,opt,name=bfruntime_info,json=bfruntimeInfo,proto3" json:"bfruntime_info,omitempty"` // BF-RT info json file contents
	Profiles      []*ForwardingPipelineConfig_Profile `protobuf:"bytes,3,rep,name=profiles,proto3" json:"profiles,omitempty"`
}

func (x *ForwardingPipelineConfig) Reset() {
	*x = ForwardingPipelineConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardingPipelineConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardingPipelineConfig) ProtoMessage() {}

func (x *ForwardingPipelineConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardingPipelineConfig.ProtoReflect.Descriptor instead.
func (*ForwardingPipelineConfig) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{45}
}

func (x *ForwardingPipelineConfig) GetP4Name() string {
	if x != nil {
		return x.P4Name
	}
	return ""
}

func (x *ForwardingPipelineConfig) GetBfruntimeInfo() []byte {
	if x != nil {
		return x.BfruntimeInfo
	}
	return nil
}

func (x *ForwardingPipelineConfig) GetProfiles() []*ForwardingPipelineConfig_Profile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

type NonP4Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BfruntimeInfo []byte `protobuf:"bytes,1,opt,name=bfruntime_info,json=bfruntimeInfo,proto3" json:"bfruntime_info,omitempty"`
}

func (x *NonP4Config) Reset() {
	*x = NonP4Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonP4Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonP4Config) ProtoMessage() {}

func (x *NonP4Config) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonP4Config.ProtoReflect.Descriptor instead.
func (*NonP4Config) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{46}
}

func (x *NonP4Config) GetBfruntimeInfo() []byte {
	if x != nil {
		return x.BfruntimeInfo
	}
	return nil
}

// Request to get config of the entire device. Any client can issue this
// request
type GetForwardingPipelineConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId uint32 `protobuf:"varint,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	ClientId uint32 `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *GetForwardingPipelineConfigRequest) Reset() {
	*x = GetForwardingPipelineConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForwardingPipelineConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForwardingPipelineConfigRequest) ProtoMessage() {}

func (x *GetForwardingPipelineConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForwardingPipelineConfigRequest.ProtoReflect.Descriptor instead.
func (*GetForwardingPipelineConfigRequest) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{47}
}

func (x *GetForwardingPipelineConfigRequest) GetDeviceId() uint32 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *GetForwardingPipelineConfigRequest) GetClientId() uint32 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

// Config of the entire device
type GetForwardingPipelineConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config      []*ForwardingPipelineConfig `protobuf:"bytes,1,rep,name=config,proto3" json:"config,omitempty"`                                // P4 info
	NonP4Config *NonP4Config                `protobuf:"bytes,2,opt,name=non_p4_config,json=nonP4Config,proto3" json:"non_p4_config,omitempty"` // Non-P4 info
}

func (x *GetForwardingPipelineConfigResponse) Reset() {
	*x = GetForwardingPipelineConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForwardingPipelineConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForwardingPipelineConfigResponse) ProtoMessage() {}

func (x *GetForwardingPipelineConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForwardingPipelineConfigResponse.ProtoReflect.Descriptor instead.
func (*GetForwardingPipelineConfigResponse) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{48}
}

func (x *GetForwardingPipelineConfigResponse) GetConfig() []*ForwardingPipelineConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *GetForwardingPipelineConfigResponse) GetNonP4Config() *NonP4Config {
	if x != nil {
		return x.NonP4Config
	}
	return nil
}

// Error message used to report a single P4-entity error for a Write RPC.
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gRPC canonical error code (see
	// github.com/grpc/grpc-go/blob/master/codes/codes.go)
	CanonicalCode int32 `protobuf:"varint,1,opt,name=canonical_code,json=canonicalCode,proto3" json:"canonical_code,omitempty"`
	// Detailed error message.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Target and architecture specific space to which this error belongs.
	// We encourage using triplet: <target>-<arch>-<vendor>,
	// e.g."targetX-psa-vendor1" or "targetY-psa-vendor2".
	Space string `protobuf:"bytes,3,opt,name=space,proto3" json:"space,omitempty"`
	// Numeric code drawn from target-specific error space above.
	Code int32 `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{49}
}

func (x *Error) GetCanonicalCode() int32 {
	if x != nil {
		return x.CanonicalCode
	}
	return 0
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetSpace() string {
	if x != nil {
		return x.Space
	}
	return ""
}

func (x *Error) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type DataField_IntArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val []uint32 `protobuf:"varint,1,rep,packed,name=val,proto3" json:"val,omitempty"`
}

func (x *DataField_IntArray) Reset() {
	*x = DataField_IntArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataField_IntArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataField_IntArray) ProtoMessage() {}

func (x *DataField_IntArray) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataField_IntArray.ProtoReflect.Descriptor instead.
func (*DataField_IntArray) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{13, 0}
}

func (x *DataField_IntArray) GetVal() []uint32 {
	if x != nil {
		return x.Val
	}
	return nil
}

type DataField_BoolArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val []bool `protobuf:"varint,1,rep,packed,name=val,proto3" json:"val,omitempty"`
}

func (x *DataField_BoolArray) Reset() {
	*x = DataField_BoolArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataField_BoolArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataField_BoolArray) ProtoMessage() {}

func (x *DataField_BoolArray) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataField_BoolArray.ProtoReflect.Descriptor instead.
func (*DataField_BoolArray) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{13, 1}
}

func (x *DataField_BoolArray) GetVal() []bool {
	if x != nil {
		return x.Val
	}
	return nil
}

type DataField_StrArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val []string `protobuf:"bytes,1,rep,name=val,proto3" json:"val,omitempty"`
}

func (x *DataField_StrArray) Reset() {
	*x = DataField_StrArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataField_StrArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataField_StrArray) ProtoMessage() {}

func (x *DataField_StrArray) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataField_StrArray.ProtoReflect.Descriptor instead.
func (*DataField_StrArray) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{13, 2}
}

func (x *DataField_StrArray) GetVal() []string {
	if x != nil {
		return x.Val
	}
	return nil
}

type DataField_ContainerArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Container []*DataField_ContainerArray_Container `protobuf:"bytes,1,rep,name=container,proto3" json:"container,omitempty"`
}

func (x *DataField_ContainerArray) Reset() {
	*x = DataField_ContainerArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataField_ContainerArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataField_ContainerArray) ProtoMessage() {}

func (x *DataField_ContainerArray) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataField_ContainerArray.ProtoReflect.Descriptor instead.
func (*DataField_ContainerArray) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{13, 3}
}

func (x *DataField_ContainerArray) GetContainer() []*DataField_ContainerArray_Container {
	if x != nil {
		return x.Container
	}
	return nil
}

type DataField_ContainerArray_Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val []*DataField `protobuf:"bytes,1,rep,name=val,proto3" json:"val,omitempty"`
}

func (x *DataField_ContainerArray_Container) Reset() {
	*x = DataField_ContainerArray_Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataField_ContainerArray_Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataField_ContainerArray_Container) ProtoMessage() {}

func (x *DataField_ContainerArray_Container) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataField_ContainerArray_Container.ProtoReflect.Descriptor instead.
func (*DataField_ContainerArray_Container) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{13, 3, 0}
}

func (x *DataField_ContainerArray_Container) GetVal() []*DataField {
	if x != nil {
		return x.Val
	}
	return nil
}

// Matches can be performed on arbitrarily-large inputs; the protobuf type
// 'bytes' is used to model arbitrarily-large values.
type KeyField_Exact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyField_Exact) Reset() {
	*x = KeyField_Exact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyField_Exact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyField_Exact) ProtoMessage() {}

func (x *KeyField_Exact) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyField_Exact.ProtoReflect.Descriptor instead.
func (*KeyField_Exact) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{15, 0}
}

func (x *KeyField_Exact) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type KeyField_Ternary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Mask  []byte `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *KeyField_Ternary) Reset() {
	*x = KeyField_Ternary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyField_Ternary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyField_Ternary) ProtoMessage() {}

func (x *KeyField_Ternary) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyField_Ternary.ProtoReflect.Descriptor instead.
func (*KeyField_Ternary) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{15, 1}
}

func (x *KeyField_Ternary) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *KeyField_Ternary) GetMask() []byte {
	if x != nil {
		return x.Mask
	}
	return nil
}

type KeyField_LPM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	PrefixLen int32  `protobuf:"varint,2,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"` // in bits
}

func (x *KeyField_LPM) Reset() {
	*x = KeyField_LPM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyField_LPM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyField_LPM) ProtoMessage() {}

func (x *KeyField_LPM) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyField_LPM.ProtoReflect.Descriptor instead.
func (*KeyField_LPM) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{15, 2}
}

func (x *KeyField_LPM) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *KeyField_LPM) GetPrefixLen() int32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

// A Range is logically a set that contains all values numerically between
// 'low' and 'high' inclusively.
type KeyField_Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Low  []byte `protobuf:"bytes,1,opt,name=low,proto3" json:"low,omitempty"`
	High []byte `protobuf:"bytes,2,opt,name=high,proto3" json:"high,omitempty"`
}

func (x *KeyField_Range) Reset() {
	*x = KeyField_Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyField_Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyField_Range) ProtoMessage() {}

func (x *KeyField_Range) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyField_Range.ProtoReflect.Descriptor instead.
func (*KeyField_Range) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{15, 3}
}

func (x *KeyField_Range) GetLow() []byte {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *KeyField_Range) GetHigh() []byte {
	if x != nil {
		return x.High
	}
	return nil
}

type KeyField_Optional struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value   []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	IsValid bool   `protobuf:"varint,2,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
}

func (x *KeyField_Optional) Reset() {
	*x = KeyField_Optional{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyField_Optional) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyField_Optional) ProtoMessage() {}

func (x *KeyField_Optional) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyField_Optional.ProtoReflect.Descriptor instead.
func (*KeyField_Optional) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{15, 4}
}

func (x *KeyField_Optional) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *KeyField_Optional) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

type ObjectId_ActionName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *ObjectId_ActionName) Reset() {
	*x = ObjectId_ActionName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectId_ActionName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectId_ActionName) ProtoMessage() {}

func (x *ObjectId_ActionName) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectId_ActionName.ProtoReflect.Descriptor instead.
func (*ObjectId_ActionName) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{34, 0}
}

func (x *ObjectId_ActionName) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type ObjectId_KeyFieldName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
}

func (x *ObjectId_KeyFieldName) Reset() {
	*x = ObjectId_KeyFieldName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectId_KeyFieldName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectId_KeyFieldName) ProtoMessage() {}

func (x *ObjectId_KeyFieldName) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectId_KeyFieldName.ProtoReflect.Descriptor instead.
func (*ObjectId_KeyFieldName) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{34, 1}
}

func (x *ObjectId_KeyFieldName) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

type ObjectId_DataFieldName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Field  string `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
}

func (x *ObjectId_DataFieldName) Reset() {
	*x = ObjectId_DataFieldName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectId_DataFieldName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectId_DataFieldName) ProtoMessage() {}

func (x *ObjectId_DataFieldName) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectId_DataFieldName.ProtoReflect.Descriptor instead.
func (*ObjectId_DataFieldName) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{34, 2}
}

func (x *ObjectId_DataFieldName) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ObjectId_DataFieldName) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

type ObjectId_TableObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName string `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	// Types that are assignable to Names:
	//	*ObjectId_TableObject_ActionName
	//	*ObjectId_TableObject_KeyFieldName
	//	*ObjectId_TableObject_DataFieldName
	Names isObjectId_TableObject_Names `protobuf_oneof:"names"`
}

func (x *ObjectId_TableObject) Reset() {
	*x = ObjectId_TableObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectId_TableObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectId_TableObject) ProtoMessage() {}

func (x *ObjectId_TableObject) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectId_TableObject.ProtoReflect.Descriptor instead.
func (*ObjectId_TableObject) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{34, 3}
}

func (x *ObjectId_TableObject) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (m *ObjectId_TableObject) GetNames() isObjectId_TableObject_Names {
	if m != nil {
		return m.Names
	}
	return nil
}

func (x *ObjectId_TableObject) GetActionName() *ObjectId_ActionName {
	if x, ok := x.GetNames().(*ObjectId_TableObject_ActionName); ok {
		return x.ActionName
	}
	return nil
}

func (x *ObjectId_TableObject) GetKeyFieldName() *ObjectId_KeyFieldName {
	if x, ok := x.GetNames().(*ObjectId_TableObject_KeyFieldName); ok {
		return x.KeyFieldName
	}
	return nil
}

func (x *ObjectId_TableObject) GetDataFieldName() *ObjectId_DataFieldName {
	if x, ok := x.GetNames().(*ObjectId_TableObject_DataFieldName); ok {
		return x.DataFieldName
	}
	return nil
}

type isObjectId_TableObject_Names interface {
	isObjectId_TableObject_Names()
}

type ObjectId_TableObject_ActionName struct {
	ActionName *ObjectId_ActionName `protobuf:"bytes,2,opt,name=action_name,json=actionName,proto3,oneof"`
}

type ObjectId_TableObject_KeyFieldName struct {
	KeyFieldName *ObjectId_KeyFieldName `protobuf:"bytes,3,opt,name=key_field_name,json=keyFieldName,proto3,oneof"`
}

type ObjectId_TableObject_DataFieldName struct {
	DataFieldName *ObjectId_DataFieldName `protobuf:"bytes,4,opt,name=data_field_name,json=dataFieldName,proto3,oneof"`
}

func (*ObjectId_TableObject_ActionName) isObjectId_TableObject_Names() {}

func (*ObjectId_TableObject_KeyFieldName) isObjectId_TableObject_Names() {}

func (*ObjectId_TableObject_DataFieldName) isObjectId_TableObject_Names() {}

type ObjectId_LearnObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LearnName     string                  `protobuf:"bytes,1,opt,name=learn_name,json=learnName,proto3" json:"learn_name,omitempty"`
	DataFieldName *ObjectId_DataFieldName `protobuf:"bytes,2,opt,name=data_field_name,json=dataFieldName,proto3" json:"data_field_name,omitempty"`
}

func (x *ObjectId_LearnObject) Reset() {
	*x = ObjectId_LearnObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectId_LearnObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectId_LearnObject) ProtoMessage() {}

func (x *ObjectId_LearnObject) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectId_LearnObject.ProtoReflect.Descriptor instead.
func (*ObjectId_LearnObject) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{34, 4}
}

func (x *ObjectId_LearnObject) GetLearnName() string {
	if x != nil {
		return x.LearnName
	}
	return ""
}

func (x *ObjectId_LearnObject) GetDataFieldName() *ObjectId_DataFieldName {
	if x != nil {
		return x.DataFieldName
	}
	return nil
}

type Subscribe_Notifications struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableLearnNotifications bool `protobuf:"varint,1,opt,name=enable_learn_notifications,json=enableLearnNotifications,proto3" json:"enable_learn_notifications,omitempty"` // Enable learn digest notifications. These notifications are
	// (device, P4-program) based so these will be triggered only after a
	// client binds to a program.
	EnableIdletimeoutNotifications bool `protobuf:"varint,2,opt,name=enable_idletimeout_notifications,json=enableIdletimeoutNotifications,proto3" json:"enable_idletimeout_notifications,omitempty"` // Enable idletimeout notifications. These are on per table basis and
	// hence (device, P4-Program) based so these will be triggered only
	// after a client binds to a program.
	EnablePortStatusChangeNotifications bool `protobuf:"varint,3,opt,name=enable_port_status_change_notifications,json=enablePortStatusChangeNotifications,proto3" json:"enable_port_status_change_notifications,omitempty"` // Enable port status change notifications. These notifications are
}

func (x *Subscribe_Notifications) Reset() {
	*x = Subscribe_Notifications{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscribe_Notifications) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscribe_Notifications) ProtoMessage() {}

func (x *Subscribe_Notifications) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscribe_Notifications.ProtoReflect.Descriptor instead.
func (*Subscribe_Notifications) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{36, 0}
}

func (x *Subscribe_Notifications) GetEnableLearnNotifications() bool {
	if x != nil {
		return x.EnableLearnNotifications
	}
	return false
}

func (x *Subscribe_Notifications) GetEnableIdletimeoutNotifications() bool {
	if x != nil {
		return x.EnableIdletimeoutNotifications
	}
	return false
}

func (x *Subscribe_Notifications) GetEnablePortStatusChangeNotifications() bool {
	if x != nil {
		return x.EnablePortStatusChangeNotifications
	}
	return false
}

type ForwardingPipelineConfig_Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileName string   `protobuf:"bytes,1,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`   // profile name
	Context     []byte   `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`                              // context json file contents
	Binary      []byte   `protobuf:"bytes,3,opt,name=binary,proto3" json:"binary,omitempty"`                                // Binary to execute
	PipeScope   []uint32 `protobuf:"varint,4,rep,packed,name=pipe_scope,json=pipeScope,proto3" json:"pipe_scope,omitempty"` // Array of pipe_scope.
}

func (x *ForwardingPipelineConfig_Profile) Reset() {
	*x = ForwardingPipelineConfig_Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bfruntime_bfruntime_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardingPipelineConfig_Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardingPipelineConfig_Profile) ProtoMessage() {}

func (x *ForwardingPipelineConfig_Profile) ProtoReflect() protoreflect.Message {
	mi := &file_bfruntime_bfruntime_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardingPipelineConfig_Profile.ProtoReflect.Descriptor instead.
func (*ForwardingPipelineConfig_Profile) Descriptor() ([]byte, []int) {
	return file_bfruntime_bfruntime_proto_rawDescGZIP(), []int{45, 0}
}

func (x *ForwardingPipelineConfig_Profile) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

func (x *ForwardingPipelineConfig_Profile) GetContext() []byte {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ForwardingPipelineConfig_Profile) GetBinary() []byte {
	if x != nil {
		return x.Binary
	}
	return nil
}

func (x *ForwardingPipelineConfig_Profile) GetPipeScope() []uint32 {
	if x != nil {
		return x.PipeScope
	}
	return nil
}

var File_bfruntime_bfruntime_proto protoreflect.FileDescriptor

var file_bfruntime_bfruntime_proto_rawDesc = []byte{
	0x0a, 0x19, 0x62, 0x66, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x62, 0x66, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x62, 0x66, 0x72,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb7, 0x02, 0x0a, 0x0c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x30, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x40,
	0x0a, 0x09, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x6f, 0x6d,
	0x69, 0x63, 0x69, 0x74, 0x79, 0x52, 0x09, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x34, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x34, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x09, 0x41, 0x74, 0x6f,
	0x6d, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e,
	0x55, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x41, 0x54, 0x41, 0x50, 0x4c, 0x41, 0x4e,
	0x45, 0x5f, 0x41, 0x54, 0x4f, 0x4d, 0x49, 0x43, 0x10, 0x02, 0x22, 0x0f, 0x0a, 0x0d, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x0b,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x66,
	0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62,
	0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x34,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x34, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x3e, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x22, 0x7b, 0x0a, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x69, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x70, 0x69, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x73, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x72, 0x73, 0x72, 0x49, 0x64,
	0x22, 0xae, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62, 0x66, 0x72, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x22, 0x4b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x44,
	0x49, 0x46, 0x59, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f,
	0x49, 0x4e, 0x43, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x04, 0x22, 0xfb, 0x02, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x0b,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62,
	0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x66,
	0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x33, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x48, 0x00, 0x52, 0x06, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22,
	0x77, 0x0a, 0x08, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x1d, 0x0a, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd3, 0x03, 0x0a, 0x0a, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x09,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x08, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x66, 0x72, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x45, 0x0a, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x66, 0x72, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64,
	0x46, 0x6c, 0x61, 0x67, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x61, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x4c, 0x0a, 0x12, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x63, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x49, 0x6e, 0x63, 0x46, 0x6c, 0x61, 0x67,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x49, 0x6e,
	0x63, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x35, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74,
	0x67, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x67, 0x74, 0x12, 0x37, 0x0a, 0x0b,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbd,
	0x01, 0x0a, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x45,
	0x0a, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x46, 0x6c,
	0x61, 0x67, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x37, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x66, 0x72,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0xb3,
	0x04, 0x0a, 0x0e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0a,
	0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x09, 0x69, 0x64, 0x6c, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x66, 0x72, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12,
	0x3a, 0x0a, 0x0c, 0x64, 0x79, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x79, 0x6e, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52,
	0x0a, 0x64, 0x79, 0x6e, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x39, 0x0a, 0x0b, 0x64,
	0x79, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x79,
	0x6e, 0x48, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x79, 0x6e, 0x48,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x6a, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x6a, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x79, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x6a, 0x12, 0x49, 0x0a, 0x12, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x67, 0x48,
	0x00, 0x52, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x76, 0x6c, 0x5f, 0x6d, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x76,
	0x6c, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x76, 0x6c, 0x4d, 0x73, 0x12, 0x49, 0x0a, 0x11,
	0x70, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x22, 0x5f, 0x0a, 0x0e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0x57, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x2d, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xaf,
	0x05, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x1d, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x12, 0x19, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x0b, 0x69,
	0x6e, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x56, 0x61, 0x6c, 0x12, 0x43, 0x0a,
	0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x72, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x72, 0x56,
	0x61, 0x6c, 0x12, 0x52, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x61, 0x72, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x41, 0x72, 0x72, 0x56, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76,
	0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x5f, 0x61, 0x72, 0x72, 0x5f, 0x76,
	0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e,
	0x53, 0x74, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x72, 0x41,
	0x72, 0x72, 0x56, 0x61, 0x6c, 0x1a, 0x1c, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03,
	0x76, 0x61, 0x6c, 0x1a, 0x1d, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x08, 0x52, 0x03, 0x76,
	0x61, 0x6c, 0x1a, 0x1c, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x76, 0x61, 0x6c,
	0x1a, 0x94, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x12, 0x4c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x1a, 0x34, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x27,
	0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x66,
	0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x38, 0x0a, 0x08, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62,
	0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xbc, 0x04, 0x0a, 0x08, 0x4b,
	0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b,
	0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x45, 0x78, 0x61, 0x63, 0x74, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x54, 0x65,
	0x72, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x07, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x72, 0x79,
	0x12, 0x2c, 0x0a, 0x03, 0x6c, 0x70, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x2e, 0x4c, 0x50, 0x4d, 0x48, 0x00, 0x52, 0x03, 0x6c, 0x70, 0x6d, 0x12, 0x32,
	0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x1a,
	0x1d, 0x0a, 0x05, 0x45, 0x78, 0x61, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x33,
	0x0a, 0x07, 0x54, 0x65, 0x72, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6d,
	0x61, 0x73, 0x6b, 0x1a, 0x3a, 0x0a, 0x03, 0x4c, 0x50, 0x4d, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x1a,
	0x2d, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69,
	0x67, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x1a, 0x3b,
	0x0a, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x43, 0x0a, 0x0d, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x68, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x72, 0x6f,
	0x6d, 0x48, 0x77, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x76,
	0x0a, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x68, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66,
	0x72, 0x6f, 0x6d, 0x48, 0x77, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x4f, 0x6e, 0x6c, 0x79,
	0x12, 0x17, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x44, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x54, 0x74, 0x6c, 0x22, 0x74, 0x0a, 0x0f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x6f, 0x64, 0x49, 0x6e, 0x63, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x49, 0x6e, 0x63,
	0x46, 0x6c, 0x61, 0x67, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x2b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x4f, 0x44, 0x5f, 0x49,
	0x4e, 0x43, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x4f, 0x44, 0x5f,
	0x49, 0x4e, 0x43, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x22, 0x3d, 0x0a, 0x0c,
	0x4b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x19, 0x0a, 0x08,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x3e, 0x0a, 0x0a, 0x44,
	0x79, 0x6e, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x66, 0x72, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x32, 0x0a, 0x0a, 0x44,
	0x79, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x6c, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x22,
	0x3a, 0x0a, 0x0c, 0x42, 0x79, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x6a, 0x12,
	0x2a, 0x0a, 0x11, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x62, 0x79, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x22, 0x97, 0x02, 0x0a, 0x09,
	0x49, 0x64, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x74, 0x6c,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x74, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x74, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x54, 0x74, 0x6c,
	0x12, 0x17, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x54, 0x74, 0x6c, 0x12, 0x4b, 0x0a, 0x0f, 0x69, 0x64, 0x6c,
	0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x64, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x69, 0x64, 0x6c, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x45,
	0x0a, 0x0d, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x14, 0x49, 0x44, 0x4c, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x4f,
	0x4c, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x44, 0x4c,
	0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x10, 0x01, 0x22, 0x2d, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x75,
	0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x76, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x76, 0x6c,
	0x5f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x76,
	0x6c, 0x56, 0x61, 0x6c, 0x22, 0x27, 0x0a, 0x0d, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x68, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xaa, 0x01,
	0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x06, 0x70, 0x72, 0x65, 0x64, 0x65,
	0x66, 0x12, 0x23, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x25, 0x0a, 0x0e, 0x50, 0x72,
	0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x2d, 0x0a, 0x0c, 0x50, 0x72,
	0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x11, 0x50, 0x72, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x29, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x46, 0x61, 0x73,
	0x74, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0x2e, 0x0a, 0x16, 0x50, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x5a, 0x0a, 0x13, 0x50, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6c, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9f, 0x03,
	0x0a, 0x0f, 0x50, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x3e, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
	0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x66, 0x72, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x52, 0x69, 0x64, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x69,
	0x64, 0x12, 0x4d, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x70,
	0x72, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x47, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x66,
	0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x65, 0x46, 0x61, 0x73, 0x74,
	0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x46, 0x61, 0x73,
	0x74, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x1a, 0x70, 0x72, 0x65,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x5f, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x65, 0x4d, 0x61,
	0x78, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x59, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x16, 0x70, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x54, 0x0a, 0x16, 0x70, 0x72, 0x65,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x66, 0x72, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x13, 0x70, 0x72, 0x65, 0x4d,
	0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22,
	0xa1, 0x01, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x31,
	0x0a, 0x0b, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x70, 0x69, 0x70, 0x65, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x70, 0x72, 0x73, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x70, 0x72, 0x73, 0x72, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x22, 0xcc, 0x05, 0x0a, 0x08, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x45, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x45, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x72, 0x6e,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x2e, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x24,
	0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x24, 0x0a, 0x0c, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x3d, 0x0a, 0x0d, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x92, 0x02, 0x0a, 0x0b, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0e,
	0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x2e, 0x4b, 0x65, 0x79, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x78,
	0x0a, 0x0b, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x22, 0xb0, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x66,
	0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12,
	0x3a, 0x0a, 0x0a, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x48, 0x00,
	0x52, 0x09, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x42, 0x08, 0x0a, 0x06, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xb0, 0x03, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x12, 0x1f, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x49, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xed, 0x01, 0x0a, 0x0d, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x20, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x54, 0x0a, 0x27, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x23, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x45, 0x0a, 0x0d, 0x44, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22,
	0xe7, 0x03, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62,
	0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x30, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x12, 0x61, 0x0a, 0x19, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64,
	0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6e, 0x0a, 0x1f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1c, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x87, 0x01, 0x0a, 0x27, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x23, 0x73, 0x65, 0x74, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x3e, 0x0a, 0x11, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x0a, 0x44, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62,
	0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x66, 0x72, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x17,
	0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x22, 0x6d, 0x0a, 0x19, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x68, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x37, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x55,
	0x70, 0x22, 0xb4, 0x04, 0x0a, 0x22, 0x53, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x4d, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x35, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5e, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x49, 0x6e, 0x69, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3c,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x9a, 0x01, 0x0a,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x49, 0x4e, 0x44, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x10, 0x01, 0x12, 0x1e, 0x0a,
	0x1a, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x57, 0x41, 0x52, 0x4d,
	0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x26, 0x0a,
	0x22, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x57, 0x41, 0x52, 0x4d,
	0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x5f, 0x41, 0x4e, 0x44, 0x5f,
	0x45, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x49, 0x4e,
	0x49, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x43, 0x4f,
	0x4e, 0x43, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x49,
	0x4e, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x05, 0x22, 0x2d, 0x0a, 0x0b, 0x44, 0x65, 0x76,
	0x49, 0x6e, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x41, 0x53, 0x54,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x48,
	0x49, 0x54, 0x4c, 0x45, 0x53, 0x53, 0x10, 0x01, 0x22, 0xba, 0x01, 0x0a, 0x23, 0x53, 0x65, 0x74,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x92, 0x01, 0x0a, 0x2c, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x27, 0x73, 0x65,
	0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa3, 0x02, 0x0a, 0x18, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x34, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x34, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x62,
	0x66, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x62, 0x66, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x48, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x7d, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x69, 0x70, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x69, 0x70, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x34, 0x0a, 0x0b, 0x4e,
	0x6f, 0x6e, 0x50, 0x34, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x66,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x62, 0x66, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x5e, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0xa0, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x66, 0x72, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x0d, 0x6e, 0x6f, 0x6e, 0x5f, 0x70,
	0x34, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x6e, 0x50,
	0x34, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x6e, 0x6f, 0x6e, 0x50, 0x34, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x72, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x2a, 0x58, 0x0a, 0x27, 0x53, 0x65, 0x74, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x49, 0x4e, 0x49, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x57, 0x41,
	0x52, 0x4d, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44,
	0x10, 0x01, 0x32, 0xec, 0x03, 0x0a, 0x09, 0x42, 0x66, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x3e, 0x0a, 0x05, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x62, 0x66, 0x72, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x3d, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x12, 0x17, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x80, 0x01, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x2e, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x2e, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x20, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x66, 0x72, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30,
	0x01, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bfruntime_bfruntime_proto_rawDescOnce sync.Once
	file_bfruntime_bfruntime_proto_rawDescData = file_bfruntime_bfruntime_proto_rawDesc
)

func file_bfruntime_bfruntime_proto_rawDescGZIP() []byte {
	file_bfruntime_bfruntime_proto_rawDescOnce.Do(func() {
		file_bfruntime_bfruntime_proto_rawDescData = protoimpl.X.CompressGZIP(file_bfruntime_bfruntime_proto_rawDescData)
	})
	return file_bfruntime_bfruntime_proto_rawDescData
}

var file_bfruntime_bfruntime_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_bfruntime_bfruntime_proto_msgTypes = make([]protoimpl.MessageInfo, 67)
var file_bfruntime_bfruntime_proto_goTypes = []interface{}{
	(SetForwardingPipelineConfigResponseType)(0),        // 0: bfrt_proto.SetForwardingPipelineConfigResponseType
	(WriteRequest_Atomicity)(0),                         // 1: bfrt_proto.WriteRequest.Atomicity
	(Update_Type)(0),                                    // 2: bfrt_proto.Update.Type
	(TableModIncFlag_Type)(0),                           // 3: bfrt_proto.TableModIncFlag.Type
	(IdleTable_IdleTableMode)(0),                        // 4: bfrt_proto.IdleTable.IdleTableMode
	(Mode_PredefinedMode)(0),                            // 5: bfrt_proto.Mode.PredefinedMode
	(SetForwardingPipelineConfigRequest_Action)(0),      // 6: bfrt_proto.SetForwardingPipelineConfigRequest.Action
	(SetForwardingPipelineConfigRequest_DevInitMode)(0), // 7: bfrt_proto.SetForwardingPipelineConfigRequest.DevInitMode
	(*WriteRequest)(nil),                                // 8: bfrt_proto.WriteRequest
	(*WriteResponse)(nil),                               // 9: bfrt_proto.WriteResponse
	(*ReadRequest)(nil),                                 // 10: bfrt_proto.ReadRequest
	(*ReadResponse)(nil),                                // 11: bfrt_proto.ReadResponse
	(*TargetDevice)(nil),                                // 12: bfrt_proto.TargetDevice
	(*Update)(nil),                                      // 13: bfrt_proto.Update
	(*Entity)(nil),                                      // 14: bfrt_proto.Entity
	(*HandleId)(nil),                                    // 15: bfrt_proto.HandleId
	(*TableEntry)(nil),                                  // 16: bfrt_proto.TableEntry
	(*TableUsage)(nil),                                  // 17: bfrt_proto.TableUsage
	(*TableAttribute)(nil),                              // 18: bfrt_proto.TableAttribute
	(*TableOperation)(nil),                              // 19: bfrt_proto.TableOperation
	(*TableData)(nil),                                   // 20: bfrt_proto.TableData
	(*DataField)(nil),                                   // 21: bfrt_proto.DataField
	(*TableKey)(nil),                                    // 22: bfrt_proto.TableKey
	(*KeyField)(nil),                                    // 23: bfrt_proto.KeyField
	(*TableReadFlag)(nil),                               // 24: bfrt_proto.TableReadFlag
	(*TableFlags)(nil),                                  // 25: bfrt_proto.TableFlags
	(*TableModIncFlag)(nil),                             // 26: bfrt_proto.TableModIncFlag
	(*KeyFieldMask)(nil),                                // 27: bfrt_proto.KeyFieldMask
	(*DynKeyMask)(nil),                                  // 28: bfrt_proto.DynKeyMask
	(*DynHashing)(nil),                                  // 29: bfrt_proto.DynHashing
	(*ByteCountAdj)(nil),                                // 30: bfrt_proto.ByteCountAdj
	(*IdleTable)(nil),                                   // 31: bfrt_proto.IdleTable
	(*StatePullIntvl)(nil),                              // 32: bfrt_proto.StatePullIntvl
	(*PortStatusChg)(nil),                               // 33: bfrt_proto.PortStatusChg
	(*Mode)(nil),                                        // 34: bfrt_proto.Mode
	(*PreGlobalRid)(nil),                                // 35: bfrt_proto.PreGlobalRid
	(*PrePortProtection)(nil),                           // 36: bfrt_proto.PrePortProtection
	(*PreFastFailover)(nil),                             // 37: bfrt_proto.PreFastFailover
	(*PreMaxNodesBeforeYield)(nil),                      // 38: bfrt_proto.PreMaxNodesBeforeYield
	(*PreMaxNodeThreshold)(nil),                         // 39: bfrt_proto.PreMaxNodeThreshold
	(*PreDeviceConfig)(nil),                             // 40: bfrt_proto.PreDeviceConfig
	(*EntryScope)(nil),                                  // 41: bfrt_proto.EntryScope
	(*ObjectId)(nil),                                    // 42: bfrt_proto.ObjectId
	(*StreamMessageRequest)(nil),                        // 43: bfrt_proto.StreamMessageRequest
	(*Subscribe)(nil),                                   // 44: bfrt_proto.Subscribe
	(*DigestListAck)(nil),                               // 45: bfrt_proto.DigestListAck
	(*StreamMessageResponse)(nil),                       // 46: bfrt_proto.StreamMessageResponse
	(*SubscribeResponse)(nil),                           // 47: bfrt_proto.SubscribeResponse
	(*DigestList)(nil),                                  // 48: bfrt_proto.DigestList
	(*IdleTimeoutNotification)(nil),                     // 49: bfrt_proto.IdleTimeoutNotification
	(*PortStatusChgNotification)(nil),                   // 50: bfrt_proto.PortStatusChgNotification
	(*SetForwardingPipelineConfigRequest)(nil),          // 51: bfrt_proto.SetForwardingPipelineConfigRequest
	(*SetForwardingPipelineConfigResponse)(nil),         // 52: bfrt_proto.SetForwardingPipelineConfigResponse
	(*ForwardingPipelineConfig)(nil),                    // 53: bfrt_proto.ForwardingPipelineConfig
	(*NonP4Config)(nil),                                 // 54: bfrt_proto.NonP4Config
	(*GetForwardingPipelineConfigRequest)(nil),          // 55: bfrt_proto.GetForwardingPipelineConfigRequest
	(*GetForwardingPipelineConfigResponse)(nil),         // 56: bfrt_proto.GetForwardingPipelineConfigResponse
	(*Error)(nil),                                       // 57: bfrt_proto.Error
	(*DataField_IntArray)(nil),                          // 58: bfrt_proto.DataField.IntArray
	(*DataField_BoolArray)(nil),                         // 59: bfrt_proto.DataField.BoolArray
	(*DataField_StrArray)(nil),                          // 60: bfrt_proto.DataField.StrArray
	(*DataField_ContainerArray)(nil),                    // 61: bfrt_proto.DataField.ContainerArray
	(*DataField_ContainerArray_Container)(nil),          // 62: bfrt_proto.DataField.ContainerArray.Container
	(*KeyField_Exact)(nil),                              // 63: bfrt_proto.KeyField.Exact
	(*KeyField_Ternary)(nil),                            // 64: bfrt_proto.KeyField.Ternary
	(*KeyField_LPM)(nil),                                // 65: bfrt_proto.KeyField.LPM
	(*KeyField_Range)(nil),                              // 66: bfrt_proto.KeyField.Range
	(*KeyField_Optional)(nil),                           // 67: bfrt_proto.KeyField.Optional
	(*ObjectId_ActionName)(nil),                         // 68: bfrt_proto.ObjectId.ActionName
	(*ObjectId_KeyFieldName)(nil),                       // 69: bfrt_proto.ObjectId.KeyFieldName
	(*ObjectId_DataFieldName)(nil),                      // 70: bfrt_proto.ObjectId.DataFieldName
	(*ObjectId_TableObject)(nil),                        // 71: bfrt_proto.ObjectId.TableObject
	(*ObjectId_LearnObject)(nil),                        // 72: bfrt_proto.ObjectId.LearnObject
	(*Subscribe_Notifications)(nil),                     // 73: bfrt_proto.Subscribe.Notifications
	(*ForwardingPipelineConfig_Profile)(nil),            // 74: bfrt_proto.ForwardingPipelineConfig.Profile
	(*status.Status)(nil),                               // 75: google.rpc.Status
}
var file_bfruntime_bfruntime_proto_depIdxs = []int32{
	12, // 0: bfrt_proto.WriteRequest.target:type_name -> bfrt_proto.TargetDevice
	13, // 1: bfrt_proto.WriteRequest.updates:type_name -> bfrt_proto.Update
	1,  // 2: bfrt_proto.WriteRequest.atomicity:type_name -> bfrt_proto.WriteRequest.Atomicity
	12, // 3: bfrt_proto.ReadRequest.target:type_name -> bfrt_proto.TargetDevice
	14, // 4: bfrt_proto.ReadRequest.entities:type_name -> bfrt_proto.Entity
	14, // 5: bfrt_proto.ReadResponse.entities:type_name -> bfrt_proto.Entity
	2,  // 6: bfrt_proto.Update.type:type_name -> bfrt_proto.Update.Type
	14, // 7: bfrt_proto.Update.entity:type_name -> bfrt_proto.Entity
	16, // 8: bfrt_proto.Entity.table_entry:type_name -> bfrt_proto.TableEntry
	17, // 9: bfrt_proto.Entity.table_usage:type_name -> bfrt_proto.TableUsage
	18, // 10: bfrt_proto.Entity.table_attribute:type_name -> bfrt_proto.TableAttribute
	19, // 11: bfrt_proto.Entity.table_operation:type_name -> bfrt_proto.TableOperation
	42, // 12: bfrt_proto.Entity.object_id:type_name -> bfrt_proto.ObjectId
	15, // 13: bfrt_proto.Entity.handle:type_name -> bfrt_proto.HandleId
	22, // 14: bfrt_proto.HandleId.key:type_name -> bfrt_proto.TableKey
	22, // 15: bfrt_proto.TableEntry.key:type_name -> bfrt_proto.TableKey
	20, // 16: bfrt_proto.TableEntry.data:type_name -> bfrt_proto.TableData
	24, // 17: bfrt_proto.TableEntry.table_read_flag:type_name -> bfrt_proto.TableReadFlag
	26, // 18: bfrt_proto.TableEntry.table_mod_inc_flag:type_name -> bfrt_proto.TableModIncFlag
	12, // 19: bfrt_proto.TableEntry.entry_tgt:type_name -> bfrt_proto.TargetDevice
	25, // 20: bfrt_proto.TableEntry.table_flags:type_name -> bfrt_proto.TableFlags
	24, // 21: bfrt_proto.TableUsage.table_read_flag:type_name -> bfrt_proto.TableReadFlag
	25, // 22: bfrt_proto.TableUsage.table_flags:type_name -> bfrt_proto.TableFlags
	31, // 23: bfrt_proto.TableAttribute.idle_table:type_name -> bfrt_proto.IdleTable
	41, // 24: bfrt_proto.TableAttribute.entry_scope:type_name -> bfrt_proto.EntryScope
	28, // 25: bfrt_proto.TableAttribute.dyn_key_mask:type_name -> bfrt_proto.DynKeyMask
	29, // 26: bfrt_proto.TableAttribute.dyn_hashing:type_name -> bfrt_proto.DynHashing
	30, // 27: bfrt_proto.TableAttribute.byte_count_adj:type_name -> bfrt_proto.ByteCountAdj
	33, // 28: bfrt_proto.TableAttribute.port_status_notify:type_name -> bfrt_proto.PortStatusChg
	32, // 29: bfrt_proto.TableAttribute.intvl_ms:type_name -> bfrt_proto.StatePullIntvl
	40, // 30: bfrt_proto.TableAttribute.pre_device_config:type_name -> bfrt_proto.PreDeviceConfig
	21, // 31: bfrt_proto.TableData.fields:type_name -> bfrt_proto.DataField
	58, // 32: bfrt_proto.DataField.int_arr_val:type_name -> bfrt_proto.DataField.IntArray
	59, // 33: bfrt_proto.DataField.bool_arr_val:type_name -> bfrt_proto.DataField.BoolArray
	61, // 34: bfrt_proto.DataField.container_arr_val:type_name -> bfrt_proto.DataField.ContainerArray
	60, // 35: bfrt_proto.DataField.str_arr_val:type_name -> bfrt_proto.DataField.StrArray
	23, // 36: bfrt_proto.TableKey.fields:type_name -> bfrt_proto.KeyField
	63, // 37: bfrt_proto.KeyField.exact:type_name -> bfrt_proto.KeyField.Exact
	64, // 38: bfrt_proto.KeyField.ternary:type_name -> bfrt_proto.KeyField.Ternary
	65, // 39: bfrt_proto.KeyField.lpm:type_name -> bfrt_proto.KeyField.LPM
	66, // 40: bfrt_proto.KeyField.range:type_name -> bfrt_proto.KeyField.Range
	67, // 41: bfrt_proto.KeyField.optional:type_name -> bfrt_proto.KeyField.Optional
	3,  // 42: bfrt_proto.TableModIncFlag.type:type_name -> bfrt_proto.TableModIncFlag.Type
	27, // 43: bfrt_proto.DynKeyMask.fields:type_name -> bfrt_proto.KeyFieldMask
	4,  // 44: bfrt_proto.IdleTable.idle_table_mode:type_name -> bfrt_proto.IdleTable.IdleTableMode
	5,  // 45: bfrt_proto.Mode.predef:type_name -> bfrt_proto.Mode.PredefinedMode
	35, // 46: bfrt_proto.PreDeviceConfig.pre_global_rid:type_name -> bfrt_proto.PreGlobalRid
	36, // 47: bfrt_proto.PreDeviceConfig.pre_port_protection:type_name -> bfrt_proto.PrePortProtection
	37, // 48: bfrt_proto.PreDeviceConfig.pre_fast_failover:type_name -> bfrt_proto.PreFastFailover
	38, // 49: bfrt_proto.PreDeviceConfig.pre_max_nodes_before_yield:type_name -> bfrt_proto.PreMaxNodesBeforeYield
	39, // 50: bfrt_proto.PreDeviceConfig.pre_max_node_threshold:type_name -> bfrt_proto.PreMaxNodeThreshold
	34, // 51: bfrt_proto.EntryScope.gress_scope:type_name -> bfrt_proto.Mode
	34, // 52: bfrt_proto.EntryScope.pipe_scope:type_name -> bfrt_proto.Mode
	34, // 53: bfrt_proto.EntryScope.prsr_scope:type_name -> bfrt_proto.Mode
	71, // 54: bfrt_proto.ObjectId.table_object:type_name -> bfrt_proto.ObjectId.TableObject
	72, // 55: bfrt_proto.ObjectId.learn_object:type_name -> bfrt_proto.ObjectId.LearnObject
	44, // 56: bfrt_proto.StreamMessageRequest.subscribe:type_name -> bfrt_proto.Subscribe
	45, // 57: bfrt_proto.StreamMessageRequest.digest_ack:type_name -> bfrt_proto.DigestListAck
	73, // 58: bfrt_proto.Subscribe.notifications:type_name -> bfrt_proto.Subscribe.Notifications
	75, // 59: bfrt_proto.Subscribe.status:type_name -> google.rpc.Status
	44, // 60: bfrt_proto.StreamMessageResponse.subscribe:type_name -> bfrt_proto.Subscribe
	48, // 61: bfrt_proto.StreamMessageResponse.digest:type_name -> bfrt_proto.DigestList
	49, // 62: bfrt_proto.StreamMessageResponse.idle_timeout_notification:type_name -> bfrt_proto.IdleTimeoutNotification
	50, // 63: bfrt_proto.StreamMessageResponse.port_status_change_notification:type_name -> bfrt_proto.PortStatusChgNotification
	52, // 64: bfrt_proto.StreamMessageResponse.set_forwarding_pipeline_config_response:type_name -> bfrt_proto.SetForwardingPipelineConfigResponse
	57, // 65: bfrt_proto.SubscribeResponse.status:type_name -> bfrt_proto.Error
	20, // 66: bfrt_proto.DigestList.data:type_name -> bfrt_proto.TableData
	12, // 67: bfrt_proto.DigestList.target:type_name -> bfrt_proto.TargetDevice
	12, // 68: bfrt_proto.IdleTimeoutNotification.target:type_name -> bfrt_proto.TargetDevice
	16, // 69: bfrt_proto.IdleTimeoutNotification.table_entry:type_name -> bfrt_proto.TableEntry
	16, // 70: bfrt_proto.PortStatusChgNotification.table_entry:type_name -> bfrt_proto.TableEntry
	6,  // 71: bfrt_proto.SetForwardingPipelineConfigRequest.action:type_name -> bfrt_proto.SetForwardingPipelineConfigRequest.Action
	7,  // 72: bfrt_proto.SetForwardingPipelineConfigRequest.dev_init_mode:type_name -> bfrt_proto.SetForwardingPipelineConfigRequest.DevInitMode
	53, // 73: bfrt_proto.SetForwardingPipelineConfigRequest.config:type_name -> bfrt_proto.ForwardingPipelineConfig
	0,  // 74: bfrt_proto.SetForwardingPipelineConfigResponse.set_forwarding_pipeline_config_response_type:type_name -> bfrt_proto.SetForwardingPipelineConfigResponseType
	74, // 75: bfrt_proto.ForwardingPipelineConfig.profiles:type_name -> bfrt_proto.ForwardingPipelineConfig.Profile
	53, // 76: bfrt_proto.GetForwardingPipelineConfigResponse.config:type_name -> bfrt_proto.ForwardingPipelineConfig
	54, // 77: bfrt_proto.GetForwardingPipelineConfigResponse.non_p4_config:type_name -> bfrt_proto.NonP4Config
	62, // 78: bfrt_proto.DataField.ContainerArray.container:type_name -> bfrt_proto.DataField.ContainerArray.Container
	21, // 79: bfrt_proto.DataField.ContainerArray.Container.val:type_name -> bfrt_proto.DataField
	68, // 80: bfrt_proto.ObjectId.TableObject.action_name:type_name -> bfrt_proto.ObjectId.ActionName
	69, // 81: bfrt_proto.ObjectId.TableObject.key_field_name:type_name -> bfrt_proto.ObjectId.KeyFieldName
	70, // 82: bfrt_proto.ObjectId.TableObject.data_field_name:type_name -> bfrt_proto.ObjectId.DataFieldName
	70, // 83: bfrt_proto.ObjectId.LearnObject.data_field_name:type_name -> bfrt_proto.ObjectId.DataFieldName
	8,  // 84: bfrt_proto.BfRuntime.Write:input_type -> bfrt_proto.WriteRequest
	10, // 85: bfrt_proto.BfRuntime.Read:input_type -> bfrt_proto.ReadRequest
	51, // 86: bfrt_proto.BfRuntime.SetForwardingPipelineConfig:input_type -> bfrt_proto.SetForwardingPipelineConfigRequest
	55, // 87: bfrt_proto.BfRuntime.GetForwardingPipelineConfig:input_type -> bfrt_proto.GetForwardingPipelineConfigRequest
	43, // 88: bfrt_proto.BfRuntime.StreamChannel:input_type -> bfrt_proto.StreamMessageRequest
	9,  // 89: bfrt_proto.BfRuntime.Write:output_type -> bfrt_proto.WriteResponse
	11, // 90: bfrt_proto.BfRuntime.Read:output_type -> bfrt_proto.ReadResponse
	52, // 91: bfrt_proto.BfRuntime.SetForwardingPipelineConfig:output_type -> bfrt_proto.SetForwardingPipelineConfigResponse
	56, // 92: bfrt_proto.BfRuntime.GetForwardingPipelineConfig:output_type -> bfrt_proto.GetForwardingPipelineConfigResponse
	46, // 93: bfrt_proto.BfRuntime.StreamChannel:output_type -> bfrt_proto.StreamMessageResponse
	89, // [89:94] is the sub-list for method output_type
	84, // [84:89] is the sub-list for method input_type
	84, // [84:84] is the sub-list for extension type_name
	84, // [84:84] is the sub-list for extension extendee
	0,  // [0:84] is the sub-list for field type_name
}

func init() { file_bfruntime_bfruntime_proto_init() }
func file_bfruntime_bfruntime_proto_init() {
	if File_bfruntime_bfruntime_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bfruntime_bfruntime_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Update); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableReadFlag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableModIncFlag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyFieldMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynKeyMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynHashing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ByteCountAdj); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdleTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatePullIntvl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortStatusChg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreGlobalRid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrePortProtection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreFastFailover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreMaxNodesBeforeYield); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreMaxNodeThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreDeviceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntryScope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscribe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DigestListAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DigestList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdleTimeoutNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortStatusChgNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetForwardingPipelineConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetForwardingPipelineConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardingPipelineConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonP4Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForwardingPipelineConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForwardingPipelineConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataField_IntArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataField_BoolArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataField_StrArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataField_ContainerArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataField_ContainerArray_Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyField_Exact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyField_Ternary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyField_LPM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyField_Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyField_Optional); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectId_ActionName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectId_KeyFieldName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectId_DataFieldName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectId_TableObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectId_LearnObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscribe_Notifications); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bfruntime_bfruntime_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardingPipelineConfig_Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bfruntime_bfruntime_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Entity_TableEntry)(nil),
		(*Entity_TableUsage)(nil),
		(*Entity_TableAttribute)(nil),
		(*Entity_TableOperation)(nil),
		(*Entity_ObjectId)(nil),
		(*Entity_Handle)(nil),
	}
	file_bfruntime_bfruntime_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*HandleId_Key)(nil),
		(*HandleId_HandleId)(nil),
	}
	file_bfruntime_bfruntime_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*TableEntry_Key)(nil),
		(*TableEntry_HandleId)(nil),
	}
	file_bfruntime_bfruntime_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*TableAttribute_IdleTable)(nil),
		(*TableAttribute_EntryScope)(nil),
		(*TableAttribute_DynKeyMask)(nil),
		(*TableAttribute_DynHashing)(nil),
		(*TableAttribute_ByteCountAdj)(nil),
		(*TableAttribute_PortStatusNotify)(nil),
		(*TableAttribute_IntvlMs)(nil),
		(*TableAttribute_PreDeviceConfig)(nil),
	}
	file_bfruntime_bfruntime_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*DataField_Stream)(nil),
		(*DataField_FloatVal)(nil),
		(*DataField_StrVal)(nil),
		(*DataField_IntArrVal)(nil),
		(*DataField_BoolArrVal)(nil),
		(*DataField_ContainerArrVal)(nil),
		(*DataField_BoolVal)(nil),
		(*DataField_StrArrVal)(nil),
	}
	file_bfruntime_bfruntime_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*KeyField_Exact_)(nil),
		(*KeyField_Ternary_)(nil),
		(*KeyField_Lpm)(nil),
		(*KeyField_Range_)(nil),
		(*KeyField_Optional_)(nil),
	}
	file_bfruntime_bfruntime_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*Mode_Predef)(nil),
		(*Mode_UserDefined)(nil),
	}
	file_bfruntime_bfruntime_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*ObjectId_TableObject_)(nil),
		(*ObjectId_LearnObject_)(nil),
	}
	file_bfruntime_bfruntime_proto_msgTypes[35].OneofWrappers = []interface{}{
		(*StreamMessageRequest_Subscribe)(nil),
		(*StreamMessageRequest_DigestAck)(nil),
	}
	file_bfruntime_bfruntime_proto_msgTypes[38].OneofWrappers = []interface{}{
		(*StreamMessageResponse_Subscribe)(nil),
		(*StreamMessageResponse_Digest)(nil),
		(*StreamMessageResponse_IdleTimeoutNotification)(nil),
		(*StreamMessageResponse_PortStatusChangeNotification)(nil),
		(*StreamMessageResponse_SetForwardingPipelineConfigResponse)(nil),
	}
	file_bfruntime_bfruntime_proto_msgTypes[63].OneofWrappers = []interface{}{
		(*ObjectId_TableObject_ActionName)(nil),
		(*ObjectId_TableObject_KeyFieldName)(nil),
		(*ObjectId_TableObject_DataFieldName)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bfruntime_bfruntime_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   67,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bfruntime_bfruntime_proto_goTypes,
		DependencyIndexes: file_bfruntime_bfruntime_proto_depIdxs,
		EnumInfos:         file_bfruntime_bfruntime_proto_enumTypes,
		MessageInfos:      file_bfruntime_bfruntime_proto_msgTypes,
	}.Build()
	File_bfruntime_bfruntime_proto = out.File
	file_bfruntime_bfruntime_proto_rawDesc = nil
	file_bfruntime_bfruntime_proto_goTypes = nil
	file_bfruntime_bfruntime_proto_depIdxs = nil
}
