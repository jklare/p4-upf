// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: bfruntime/bfruntime.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BfRuntimeClient is the client API for BfRuntime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BfRuntimeClient interface {
	// Update one or more P4 entities on the target.
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	// Read one or more P4 entities from the target.
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (BfRuntime_ReadClient, error)
	// Sets the P4 fowarding-pipeline config.
	SetForwardingPipelineConfig(ctx context.Context, in *SetForwardingPipelineConfigRequest, opts ...grpc.CallOption) (*SetForwardingPipelineConfigResponse, error)
	// Gets the current P4 fowarding-pipeline config.
	GetForwardingPipelineConfig(ctx context.Context, in *GetForwardingPipelineConfigRequest, opts ...grpc.CallOption) (*GetForwardingPipelineConfigResponse, error)
	// Represents the bidirectional stream between the controller and the
	// switch (initiated by the controller).
	StreamChannel(ctx context.Context, opts ...grpc.CallOption) (BfRuntime_StreamChannelClient, error)
}

type bfRuntimeClient struct {
	cc grpc.ClientConnInterface
}

func NewBfRuntimeClient(cc grpc.ClientConnInterface) BfRuntimeClient {
	return &bfRuntimeClient{cc}
}

func (c *bfRuntimeClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/bfrt_proto.BfRuntime/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfRuntimeClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (BfRuntime_ReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &BfRuntime_ServiceDesc.Streams[0], "/bfrt_proto.BfRuntime/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &bfRuntimeReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BfRuntime_ReadClient interface {
	Recv() (*ReadResponse, error)
	grpc.ClientStream
}

type bfRuntimeReadClient struct {
	grpc.ClientStream
}

func (x *bfRuntimeReadClient) Recv() (*ReadResponse, error) {
	m := new(ReadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bfRuntimeClient) SetForwardingPipelineConfig(ctx context.Context, in *SetForwardingPipelineConfigRequest, opts ...grpc.CallOption) (*SetForwardingPipelineConfigResponse, error) {
	out := new(SetForwardingPipelineConfigResponse)
	err := c.cc.Invoke(ctx, "/bfrt_proto.BfRuntime/SetForwardingPipelineConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfRuntimeClient) GetForwardingPipelineConfig(ctx context.Context, in *GetForwardingPipelineConfigRequest, opts ...grpc.CallOption) (*GetForwardingPipelineConfigResponse, error) {
	out := new(GetForwardingPipelineConfigResponse)
	err := c.cc.Invoke(ctx, "/bfrt_proto.BfRuntime/GetForwardingPipelineConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfRuntimeClient) StreamChannel(ctx context.Context, opts ...grpc.CallOption) (BfRuntime_StreamChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &BfRuntime_ServiceDesc.Streams[1], "/bfrt_proto.BfRuntime/StreamChannel", opts...)
	if err != nil {
		return nil, err
	}
	x := &bfRuntimeStreamChannelClient{stream}
	return x, nil
}

type BfRuntime_StreamChannelClient interface {
	Send(*StreamMessageRequest) error
	Recv() (*StreamMessageResponse, error)
	grpc.ClientStream
}

type bfRuntimeStreamChannelClient struct {
	grpc.ClientStream
}

func (x *bfRuntimeStreamChannelClient) Send(m *StreamMessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bfRuntimeStreamChannelClient) Recv() (*StreamMessageResponse, error) {
	m := new(StreamMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BfRuntimeServer is the server API for BfRuntime service.
// All implementations must embed UnimplementedBfRuntimeServer
// for forward compatibility
type BfRuntimeServer interface {
	// Update one or more P4 entities on the target.
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
	// Read one or more P4 entities from the target.
	Read(*ReadRequest, BfRuntime_ReadServer) error
	// Sets the P4 fowarding-pipeline config.
	SetForwardingPipelineConfig(context.Context, *SetForwardingPipelineConfigRequest) (*SetForwardingPipelineConfigResponse, error)
	// Gets the current P4 fowarding-pipeline config.
	GetForwardingPipelineConfig(context.Context, *GetForwardingPipelineConfigRequest) (*GetForwardingPipelineConfigResponse, error)
	// Represents the bidirectional stream between the controller and the
	// switch (initiated by the controller).
	StreamChannel(BfRuntime_StreamChannelServer) error
	mustEmbedUnimplementedBfRuntimeServer()
}

// UnimplementedBfRuntimeServer must be embedded to have forward compatible implementations.
type UnimplementedBfRuntimeServer struct {
}

func (UnimplementedBfRuntimeServer) Write(context.Context, *WriteRequest) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedBfRuntimeServer) Read(*ReadRequest, BfRuntime_ReadServer) error {
	return status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedBfRuntimeServer) SetForwardingPipelineConfig(context.Context, *SetForwardingPipelineConfigRequest) (*SetForwardingPipelineConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetForwardingPipelineConfig not implemented")
}
func (UnimplementedBfRuntimeServer) GetForwardingPipelineConfig(context.Context, *GetForwardingPipelineConfigRequest) (*GetForwardingPipelineConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForwardingPipelineConfig not implemented")
}
func (UnimplementedBfRuntimeServer) StreamChannel(BfRuntime_StreamChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamChannel not implemented")
}
func (UnimplementedBfRuntimeServer) mustEmbedUnimplementedBfRuntimeServer() {}

// UnsafeBfRuntimeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BfRuntimeServer will
// result in compilation errors.
type UnsafeBfRuntimeServer interface {
	mustEmbedUnimplementedBfRuntimeServer()
}

func RegisterBfRuntimeServer(s grpc.ServiceRegistrar, srv BfRuntimeServer) {
	s.RegisterService(&BfRuntime_ServiceDesc, srv)
}

func _BfRuntime_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfRuntimeServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bfrt_proto.BfRuntime/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfRuntimeServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BfRuntime_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BfRuntimeServer).Read(m, &bfRuntimeReadServer{stream})
}

type BfRuntime_ReadServer interface {
	Send(*ReadResponse) error
	grpc.ServerStream
}

type bfRuntimeReadServer struct {
	grpc.ServerStream
}

func (x *bfRuntimeReadServer) Send(m *ReadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BfRuntime_SetForwardingPipelineConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetForwardingPipelineConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfRuntimeServer).SetForwardingPipelineConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bfrt_proto.BfRuntime/SetForwardingPipelineConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfRuntimeServer).SetForwardingPipelineConfig(ctx, req.(*SetForwardingPipelineConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BfRuntime_GetForwardingPipelineConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForwardingPipelineConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfRuntimeServer).GetForwardingPipelineConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bfrt_proto.BfRuntime/GetForwardingPipelineConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfRuntimeServer).GetForwardingPipelineConfig(ctx, req.(*GetForwardingPipelineConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BfRuntime_StreamChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BfRuntimeServer).StreamChannel(&bfRuntimeStreamChannelServer{stream})
}

type BfRuntime_StreamChannelServer interface {
	Send(*StreamMessageResponse) error
	Recv() (*StreamMessageRequest, error)
	grpc.ServerStream
}

type bfRuntimeStreamChannelServer struct {
	grpc.ServerStream
}

func (x *bfRuntimeStreamChannelServer) Send(m *StreamMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bfRuntimeStreamChannelServer) Recv() (*StreamMessageRequest, error) {
	m := new(StreamMessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BfRuntime_ServiceDesc is the grpc.ServiceDesc for BfRuntime service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BfRuntime_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bfrt_proto.BfRuntime",
	HandlerType: (*BfRuntimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _BfRuntime_Write_Handler,
		},
		{
			MethodName: "SetForwardingPipelineConfig",
			Handler:    _BfRuntime_SetForwardingPipelineConfig_Handler,
		},
		{
			MethodName: "GetForwardingPipelineConfig",
			Handler:    _BfRuntime_GetForwardingPipelineConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Read",
			Handler:       _BfRuntime_Read_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamChannel",
			Handler:       _BfRuntime_StreamChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bfruntime/bfruntime.proto",
}
